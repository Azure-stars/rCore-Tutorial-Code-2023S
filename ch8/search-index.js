var searchIndex = JSON.parse('{\
"bare_metal":{"doc":"Abstractions common to bare metal systems","t":[3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11],"n":["CriticalSection","Mutex","Nr","Peripheral","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","from","from","from","get","into","into","into","new","new","new","nr","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["bare_metal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Critical section token","A “mutex” based on critical sections","Interrupt number","A peripheral","","Borrows the data for the duration of the critical section","","","Borrows the peripheral for the duration of a critical …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a pointer to the register block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a critical section token","Creates a new mutex","Creates a new peripheral","Returns the number associated with an interrupt","","","","","","","","",""],"i":[0,0,0,0,2,1,1,3,3,2,1,3,3,2,1,3,3,2,1,3,2,1,3,11,2,1,3,2,1,3,2,1,3],"f":[0,0,0,0,[[]],[[1,2]],[[]],[[]],[[3,2]],[[]],[[]],[[]],[[[3,[4]],5],6],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[],2],[[],1],[7,3],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10]],"p":[[3,"Mutex"],[3,"CriticalSection"],[3,"Peripheral"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"u8"],[4,"Result"],[3,"TypeId"],[8,"Nr"]]},\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":[18,8,8,10,10,10,10,10,10,10,10,10],"n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":["bit_field","","","","","","","","","","",""],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[4,0,0,5,4,5,4,5,4,5,4,5],"f":[0,0,0,[[],1],[1,2],[1,2],[[[3,[1]]]],[[[3,[1]]]],[[1,2]],[[1,2]],[[[3,[1]]]],[[[3,[1]]]]],"p":[[15,"usize"],[15,"bool"],[8,"RangeBounds"],[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"p":[]},\
"buddy_system_allocator":{"doc":"","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FrameAllocator","Heap","LockedFrameAllocator","LockedHeap","LockedHeapWithRescue","add_frame","add_to_heap","alloc","alloc","alloc","alloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","dealloc","dealloc","dealloc","dealloc","deref","deref","deref","empty","empty","fmt","from","from","from","from","from","init","insert","into","into","into","into","into","linked_list","new","new","new","new","new","stats_alloc_actual","stats_alloc_user","stats_total_bytes","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Iter","IterMut","LinkedList","ListNode","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","is_empty","iter","iter_mut","new","next","next","pop","pop","push","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value"],"q":["buddy_system_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","buddy_system_allocator::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A frame allocator that uses buddy system, requiring a …","A heap that uses buddy system","A locked version of <code>FrameAllocator</code>","A locked version of <code>Heap</code>","A locked version of <code>Heap</code> with rescue before oom","Add a range of frame number [start, end) to the allocator","Add a range of memory [start, end) to the heap","Alloc a range of frames from the allocator, return the …","Alloc a range of memory from the heap satifying <code>layout</code> …","","","","","","","","","","","","","Dealloc a range of frames [frame, frame+count) from the …","Dealloc a range of memory from the heap","","","","","","Create an empty heap","Creates an empty heap","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Add a range of memory [start, end) to the heap","Add a range of frame to the allocator","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Provide the intrusive LinkedList","Create an empty frame allocator","Creates an empty heap","Create an empty heap","Creates an empty heap","Creates an empty heap","Return the number of bytes that are actually allocated","Return the number of bytes that user requests","Return the total number of bytes in the heap","","","","","","","","","","","","","","","","An iterator over the linked list","A mutable iterator over the linked list","An intrusive linked list","Represent a mutable node in <code>LinkedList</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Return <code>true</code> if the list is empty","Return an iterator over the items in the list","Return an mutable iterator over the items in the list","Create a new LinkedList","","","Remove the node from the list","Try to remove the first item in the list","Push <code>item</code> to the front of the list","","","","","","","","","","","","","","Returns the pointed address"],"i":[0,0,0,0,0,1,3,1,3,9,10,1,11,3,9,10,1,11,3,9,10,1,3,9,10,11,9,10,3,9,3,1,11,3,9,10,3,1,1,11,3,9,10,0,1,11,3,9,10,3,3,3,1,11,3,9,10,1,11,3,9,10,1,11,3,9,10,0,0,0,0,19,21,20,17,19,21,20,17,17,17,17,19,21,20,17,19,21,20,17,19,20,17,17,17,17,19,20,21,17,17,17,19,21,20,17,19,21,20,17,19,21,20,17,21],"f":[0,0,0,0,0,[[1,2,2]],[[3,2,2]],[[1,2],[[4,[2]]]],[[3,5],[[8,[[7,[6]]]]]],[[9,5],6],[[10,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,2]],[[3,[7,[6]],5]],[[9,6,5]],[[10,6,5]],[11,12],[9,12],[10,12],[[],3],[[],9],[[3,13],14],[[]],[[]],[[]],[[]],[[]],[[3,2,2]],[[1,[15,[2]]]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],11],[[],3],[[],9],[[],10],[3,2],[3,2],[3,2],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[[]],[[17,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,18],[17,19],[17,20],[[],17],[19,4],[20,4],[21,2],[17,[[4,[2]]]],[[17,2]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],16],[[],16],[[],16],[[],16],[21,2]],"p":[[3,"FrameAllocator"],[15,"usize"],[3,"Heap"],[4,"Option"],[3,"Layout"],[15,"u8"],[3,"NonNull"],[4,"Result"],[3,"LockedHeap"],[3,"LockedHeapWithRescue"],[3,"LockedFrameAllocator"],[3,"Mutex"],[3,"Formatter"],[6,"Result"],[3,"Range"],[3,"TypeId"],[3,"LinkedList"],[15,"bool"],[3,"Iter"],[3,"IterMut"],[3,"ListNode"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"easy_fs":{"doc":"<code>EasyFileSystem</code>’s disk layout overall design – …","t":[17,2,2,2,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,3,11,11,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,17,3,13,3,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLOCK_SZ","BlockDevice","EasyFileSystem","Inode","bitmap","block_cache","block_dev","efs","layout","vfs","Bitmap","alloc","borrow","borrow_mut","dealloc","from","into","maximum","new","try_from","try_into","type_id","BLOCK_CACHE_MANAGER","BlockCache","BlockCacheManager","block_cache_sync_all","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","drop","from","from","from","get_block_cache","get_block_cache","get_mut","get_ref","into","into","into","modify","new","new","read","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BlockDevice","read_block","write_block","EasyFileSystem","alloc_data","alloc_inode","block_device","borrow","borrow_mut","create","data_bitmap","dealloc_data","from","get_data_block_id","get_disk_inode_pos","inode_bitmap","into","open","root_inode","try_from","try_into","type_id","DIRENT_SZ","DirEntry","Directory","DiskInode","DiskInodeType","File","SuperBlock","as_bytes","as_bytes_mut","blocks_num_needed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_size","data_area_blocks","data_bitmap_blocks","data_blocks","direct","empty","eq","fmt","from","from","from","from","get_block_id","increase_size","indirect1","indirect2","initialize","initialize","inode_area_blocks","inode_bitmap_blocks","inode_id","into","into","into","into","is_dir","is_file","is_valid","name","new","read_at","size","total_blocks","total_blocks","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_at","Inode","borrow","borrow_mut","clear","create","find","from","into","ls","new","read_at","try_from","try_into","type_id","write_at"],"q":["easy_fs","","","","","","","","","","easy_fs::bitmap","","","","","","","","","","","","easy_fs::block_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","easy_fs::block_dev","","","easy_fs::efs","","","","","","","","","","","","","","","","","","","easy_fs::layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","easy_fs::vfs","","","","","","","","","","","","","",""],"d":["","","","","Disk layout &amp; data structure layer: about bitmaps","Block Cache Layer Implements about the disk block cache …","Block device interface.","Disk block manager layer","Disk layout &amp; data structure layer","index node(inode, namely file control block) layer","bitmap struct for disk block management","Allocate a block according to the bitmap info","","","Deallocate a block according to the bitmap info","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","bitmap max size in bits(the max number of blocks according …","Create new bitmap blocks","","","","BLOCK_CACHE_MANAGER: Glocal instance of BlockCacheManager.","BlockCache is a cache for a block in disk.","BlockCacheManager is a manager for BlockCache.","Sync(write) all the block cache to disk.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a block cache from the queue. according to the …","Get a block cache from the queue. according to the …","Get a mutable reference to the data in the block cache …","Get a immutable reference to the data in the block cache …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Write the data into the block cache according to the …","Load a new BlockCache from disk.","Create a new BlockCacheManager with an empty queue …","Read the data from the block cache according to the offset.","Sync(write) the block cache to disk.","","","","","","","","","","","Read a block from the block device.","Write a block to the block device.","EasyFileSystem struct","allocate a new data block, return its block position …","allocate a new inode, return its inode_id","The block device","","","Create a new EasyFileSystem","The bitmap of data blocks","deallocate a data block according to its block id","Returns the argument unchanged.","Get data block position according to the data block id","Get inode block position (the block id and offset in this …","The bitmap of inode blocks","Calls <code>U::from(self)</code>.","Open an existing EasyFileSystem","Get the root inode","","","","","Directory entry struct","Directory type","Inode struct in disk","Inode Type of easy-fs","File type","superblock of easy-fs","Convert directory entry into immutable bytes","Convert directory entry into mutable bytes","Number of blocks needed to extend.","","","","","","","","","Clear size to zero and return blocks that should be …","The number of blocks used for data area","The number of blocks used for data bitmap","Return block number correspond to size.","array of direct block id","Create an empty directory entry","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","block id of the start block corresponding to the file …","increase file length to new_size and allocate new blocks.","one-level indirect block id","two-level indirect block id","Initialize the superblock","indirect1 and indirect2 block are allocated only when they …","The number of blocks used for inode area","The number of blocks used for inode bitmap","get the inode id of the directory entry","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","inode is directory?","inode is file?","Check if the superblock is valid according to the magic …","get the name of the directory entry","Create a directory entry with name and inode number","Read file data at offset position from inode into buf","file size","Return number of blocks needed include indirect1/2.","The number of total blocks in easy-fs","","","","","","","","","","","","","Write file data at offset position from buf into inode","Inode struct in memory","","","Set the file(disk inode) length to zero, delloc all data …","create a file with ‘name’ in the root directory","find the disk inode of the file with ‘name’","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","create a directory with ‘name’ in the root directory","Create a new Disk Inode","Read the content in offset position of the file into ‘buf…","","","","Write the content in ‘buf’ into offset position of the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,9,11,7,9,11,7,7,9,9,11,7,0,11,9,9,9,11,7,9,9,11,9,9,9,11,7,9,11,7,9,11,7,0,10,10,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,19,0,0,19,0,16,16,17,21,17,16,19,21,17,16,19,17,21,21,17,17,16,19,21,21,17,16,19,17,17,17,17,21,17,21,21,16,21,17,16,19,17,17,21,16,16,17,17,17,21,21,17,16,19,21,17,16,19,21,17,16,19,17,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[[]],[[]],[[1,2,3]],[[]],[[]],[1,3],[[3,3],1],[[],5],[[],5],[[],6],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,8],[9],[[]],[[]],[[]],[[3,[2,[10]]],[[2,[[8,[9]]]]]],[[11,3,[2,[10]]],[[2,[[8,[9]]]]]],[[9,3]],[[9,3]],[[]],[[]],[[]],[[9,3,12]],[[3,[2,[10]]],9],[[],11],[[9,3,12]],[9],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,[3],[3],0,[13,14],[13,14],0,[[]],[[]],[[[2,[10]],14,14],[[2,[[8,[13]]]]]],0,[[13,14]],[[]],[[13,14],14],[[13,14]],0,[[]],[[[2,[10]]],[[2,[[8,[13]]]]]],[2,15],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,[16],[16],[[17,14],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,2],[[18,[14]]]],0,0,[17,14],0,[[],16],[[19,19],20],[[21,22],23],[[]],[[]],[[]],[[]],[[17,14,2],14],[[17,14,[18,[14]],2]],0,0,[[21,14,14,14,14,14]],[[17,19]],0,0,[16,14],[[]],[[]],[[]],[[]],[17,20],[17,20],[21,20],[16,24],[[24,14],16],[[17,3,2],3],0,[14,14],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[17,3,2],3],0,[[]],[[]],[15],[[15,24],[[4,[[2,[15]]]]]],[[15,24],[[4,[[2,[15]]]]]],[[]],[[]],[15,[[18,[25]]]],[[14,3,[2,[[8,[13]]]],[2,[10]]],15],[[15,3],3],[[],5],[[],5],[[],6],[[15,3],3]],"p":[[3,"Bitmap"],[3,"Arc"],[15,"usize"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"BLOCK_CACHE_MANAGER"],[3,"Mutex"],[3,"BlockCache"],[8,"BlockDevice"],[3,"BlockCacheManager"],[8,"FnOnce"],[3,"EasyFileSystem"],[15,"u32"],[3,"Inode"],[3,"DirEntry"],[3,"DiskInode"],[3,"Vec"],[4,"DiskInodeType"],[15,"bool"],[3,"SuperBlock"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[[]],0],"p":[]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,19,4,4,6,6,8,7,11,0,1,3,1,3,19,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,19,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,8,7,11,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[4],[6],[8],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[18]]]],[[3,[12,[18]]],3],[1],0,0,[[],19],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[8,8],10],[[7,7],10],[[11,11],10],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[19,[[16,[15]]]],[19,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"os":{"doc":"The main module and entrypoint","t":[0,5,0,0,0,0,0,0,0,14,14,5,0,0,0,0,0,0,6,17,17,17,17,17,17,8,17,3,17,12,11,11,10,11,5,10,11,10,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,3,11,11,11,11,5,11,11,11,11,2,2,0,12,3,3,12,5,11,11,11,11,11,11,11,11,0,12,3,17,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,8,18,3,3,3,3,3,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,5,5,12,11,12,11,5,12,11,0,10,10,12,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,10,18,3,3,3,18,18,3,18,18,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,5,11,11,11,12,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,13,13,3,3,17,4,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,5,11,11,11,11,11,12,12,12,12,3,3,3,3,3,3,3,3,8,3,3,3,3,12,0,12,12,12,12,12,12,12,5,0,5,12,0,5,5,0,0,12,12,5,12,10,5,5,5,5,12,12,12,12,17,17,3,3,3,3,8,17,6,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,6,3,3,12,10,11,11,11,11,11,11,11,12,10,11,11,11,12,11,5,5,5,11,11,11,11,5,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,7,7,5,5,5,13,13,3,3,3,4,3,18,18,18,18,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,5,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,12,11,11,11,11,11,12,11,11,11,5,11,11,5,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,18,3,3,3,18,18,3,3,18,18,18,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,5,5,5,5,5,3,8,3,3,3,3,0,12,12,12,12,10,12,0,0,10,0,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,8,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,3,3,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,12,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,5,0,5,5,5,5,5,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,11,11,11,11,11,11,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,13,17,3,3,3,13,13,3,3,3,4,12,5,5,12,5,11,11,5,0,5,5,5,5,5,5,5,11,5,11,0,12,11,12,5,0,5,5,0,12,0,12,5,5,5,5,12,5,0,12,5,0,5,0,11,11,11,5,3,11,11,11,11,11,12,12,12,11,11,11,11,12,12,17,3,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,12,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,3,3,3,12,12,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,5,12,11,5,5,11,11,11,11,11,11,11,11,11,5,3,3,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,12,11,11,11,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,12,5,5,5,5,5,5,11,11,11,11,12,11,11,11,5,5,11,5,11,11,11,11,11,11,18,18,18,18,18,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,13,3,3,4,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,17,17,17,3,3,12,5,11,11,11,11,5,11,11,11,12,11,11,5,5,5,11,11,11,5,5,12,11,11,11,11,11,11,3,0,5,5,12,12,12,5,5,12,5,5,12,5,12,3,11,11,11,11,11,11,11,11,12,12,12,11,12,11,12,11,11,11,12],"n":["board","clear_bss","config","console","drivers","fs","lang_items","logging","mm","print","println","rust_main","sbi","sync","syscall","task","timer","trap","BlockDeviceImpl","CLOCK_FREQ","EXIT_FAILURE","EXIT_FAILURE_FLAG","EXIT_RESET","EXIT_SUCCESS","MMIO","QEMUExit","QEMU_EXIT_HANDLE","RISCV64","VIRT_TEST","addr","borrow","borrow_mut","exit","exit","exit_code_encode","exit_failure","exit_failure","exit_success","exit_success","from","into","new","try_from","try_into","type_id","CLOCK_FREQ","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MAX_SYSCALL_NUM","MEMORY_END","MMIO","PAGE_SIZE","PAGE_SIZE_BITS","TRAMPOLINE","TRAP_CONTEXT_BASE","USER_STACK_SIZE","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","BLOCK_DEVICE","BLOCK_DEVICE","block","0","BLOCK_DEVICE","VirtIOBlock","__private_field","block_device_test","borrow","borrow_mut","deref","from","into","try_from","try_into","type_id","virtio_blk","0","QUEUE_FRAMES","VIRTIO0","VirtIOBlock","VirtioHal","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","dma_alloc","dma_dealloc","from","from","from","into","into","into","new","phys_to_virt","read_block","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virt_to_phys","write_block","DIR","FILE","File","NULL","OSInode","OpenFlags","Pipe","Stat","StatMode","Stdin","Stdout","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","buffer","clone","clone_into","cmp","complement","contains","dev","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","ino","inode","insert","intersection","intersects","into","into","is_all","is_empty","list_apps","make_pipe","mode","ne","nlink","not","open_file","pad","partial_cmp","pipe","read","readable","readable","readable","remove","set","stdio","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","writable","writable","writable","write","CREATE","OSInode","OSInodeInner","OpenFlags","RDONLY","RDWR","ROOT_INODE","TRUNC","WRONLY","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","deref","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","inode","insert","intersection","intersects","into","into","into","into","is_all","is_empty","list_apps","ne","new","not","offset","open_file","partial_cmp","read","read_all","read_write","readable","readable","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","writable","writable","write","Empty","Full","Normal","Pipe","PipeRingBuffer","RING_BUFFER_SIZE","RingBufferStatus","all_write_ends_closed","arr","available_read","available_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone_into","eq","from","from","from","head","into","into","into","make_pipe","new","read","read_byte","read_end_with_buffer","readable","readable","set_write_end","status","tail","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","writable","writable","write","write_byte","write_end","write_end_with_buffer","Stdin","Stdout","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read","read","readable","readable","try_from","try_from","try_into","try_into","type_id","type_id","writable","writable","write","write","backtrace","panic","SimpleLogger","borrow","borrow_mut","enabled","flush","from","init","into","log","try_from","try_into","type_id","0","0","0","0","FrameTracker","KERNEL_SPACE","MapPermission","MemorySet","PageTable","PageTableEntry","PhysAddr","PhysPageNum","StepByOne","UserBuffer","UserBufferIterator","VirtAddr","VirtPageNum","__private_field","address","areas","bits","bits","buffers","buffers","current_buffer","current_idx","frame_alloc","frame_allocator","frame_dealloc","frames","heap_allocator","init","kernel_token","memory_set","page_table","page_table","ppn","remap_test","root_ppn","step","translated_byte_buffer","translated_ref","translated_refmut","translated_str","0","0","0","0","PA_WIDTH_SV39","PPN_WIDTH_SV39","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VA_WIDTH_SV39","VPNRange","VPN_WIDTH_SV39","VirtAddr","VirtPageNum","aligned","aligned","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","current","end","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_bytes_array","get_end","get_mut","get_mut","get_pte_array","get_ref","get_start","indexes","into","into","into","into","into","into","into_iter","into_iter","l","ne","ne","ne","ne","new","new","next","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","step","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","dealloc","dealloc","deref","drop","end","fmt","frame_alloc","frame_allocator_test","frame_dealloc","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","heap_test","init_heap","Framed","Identical","KERNEL_SPACE","MapArea","MapPermission","MapType","MemorySet","R","U","W","X","__private_field","activate","all","append_to","append_to","areas","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","copy_data","data_frames","deref","difference","ebss","edata","ekernel","empty","eq","eq","erodata","etext","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_another","from_bits","from_bits_truncate","from_bits_unchecked","from_elf","from_existed_user","from_iter","hash","insert","insert_framed_area","intersection","intersects","into","into","into","into","into","is_all","is_empty","kernel_token","map","map_one","map_perm","map_trampoline","map_type","ne","new","new_bare","new_kernel","not","page_table","partial_cmp","push","recycle_data_pages","remap_test","remove","remove_area_with_start_vpn","sbss_with_stack","sdata","set","shrink_to","shrink_to","srodata","stext","strampoline","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","UserBuffer","UserBufferIterator","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","clone","clone","clone_into","clone_into","cmp","complement","contains","current_buffer","current_idx","difference","empty","empty","eq","executable","extend","find_pte","find_pte_create","flags","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_token","hash","insert","intersection","intersects","into","into","into","into","into","into_iter","into_iter","is_all","is_empty","is_valid","len","map","ne","new","new","new","next","not","partial_cmp","ppn","readable","remove","root_ppn","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","translate_va","translated_byte_buffer","translated_ref","translated_refmut","translated_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","writable","SBI_CONSOLE_GETCHAR","SBI_CONSOLE_PUTCHAR","SBI_SET_TIMER","SBI_SHUTDOWN","console_getchar","console_putchar","sbi_call","set_timer","shutdown","Condvar","Mutex","MutexBlocking","MutexSpin","Semaphore","UPSafeCell","condvar","inner","inner","inner","inner","lock","locked","mutex","semaphore","unlock","up","Condvar","CondvarInner","borrow","borrow","borrow_mut","borrow_mut","from","from","inner","into","into","new","signal","try_from","try_from","try_into","try_into","type_id","type_id","wait","wait_queue","Mutex","MutexBlocking","MutexBlockingInner","MutexSpin","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","inner","into","into","into","lock","lock","lock","locked","locked","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlock","unlock","unlock","wait_queue","Semaphore","SemaphoreInner","borrow","borrow","borrow_mut","borrow_mut","count","down","from","from","inner","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","up","wait_queue","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_CLOSE","SYSCALL_CONDVAR_CREATE","SYSCALL_CONDVAR_SIGNAL","SYSCALL_CONDVAR_WAIT","SYSCALL_DUP","SYSCALL_ENABLE_DEADLOCK_DETECT","SYSCALL_EXEC","SYSCALL_EXIT","SYSCALL_FORK","SYSCALL_FSTAT","SYSCALL_GETPID","SYSCALL_GETTID","SYSCALL_GETTIMEOFDAY","SYSCALL_KILL","SYSCALL_LINKAT","SYSCALL_MMAP","SYSCALL_MUNMAP","SYSCALL_MUTEX_CREATE","SYSCALL_MUTEX_LOCK","SYSCALL_MUTEX_UNLOCK","SYSCALL_OPENAT","SYSCALL_PIPE","SYSCALL_READ","SYSCALL_SEMAPHORE_CREATE","SYSCALL_SEMAPHORE_DOWN","SYSCALL_SEMAPHORE_UP","SYSCALL_SET_PRIORITY","SYSCALL_SLEEP","SYSCALL_SPAWN","SYSCALL_TASK_INFO","SYSCALL_THREAD_CREATE","SYSCALL_UNLINKAT","SYSCALL_WAITPID","SYSCALL_WAITTID","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","sync","syscall","thread","sys_close","sys_dup","sys_fstat","sys_linkat","sys_open","sys_pipe","sys_read","sys_unlinkat","sys_write","TaskInfo","TimeVal","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","into","into","sec","status","sys_exec","sys_exit","sys_fork","sys_get_time","sys_getpid","sys_kill","sys_mmap","sys_munmap","sys_set_priority","sys_spawn","sys_task_info","sys_waitpid","sys_yield","syscall_times","time","try_from","try_from","try_into","try_into","type_id","type_id","usec","sys_condvar_create","sys_condvar_signal","sys_condvar_wait","sys_enable_deadlock_detect","sys_mutex_create","sys_mutex_lock","sys_mutex_unlock","sys_semaphore_create","sys_semaphore_down","sys_semaphore_up","sys_sleep","sys_gettid","sys_thread_create","sys_waittid","0","0","Blocked","IDLE_PID","INITPROC","KernelStack","PidHandle","Ready","Running","SignalFlags","TaskContext","TaskControlBlock","TaskStatus","__private_field","add_initproc","add_task","bits","block_current_and_run_next","borrow","borrow_mut","check_signals_of_current","context","current_add_signal","current_kstack_top","current_process","current_task","current_trap_cx","current_trap_cx_user_va","current_user_token","deref","exit_current_and_run_next","from","id","inner","into","kstack","kstack_alloc","manager","pid2process","pid_alloc","process","process","processor","ra","remove_from_pid2process","remove_inactive_task","remove_task","run_tasks","s","schedule","signal","sp","suspend_current_and_run_next","switch","take_current_task","task","try_from","try_into","type_id","wakeup_task","TaskContext","borrow","borrow_mut","from","goto_trap_return","into","ra","s","sp","try_from","try_into","type_id","zero_init","0","0","IDLE_PID","KSTACK_ALLOCATOR","KernelStack","PID_ALLOCATOR","PidHandle","RecycleAllocator","TaskUserRes","__private_field","__private_field","alloc","alloc_tid","alloc_user_res","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","current","dealloc","dealloc_tid","dealloc_user_res","deref","deref","drop","drop","drop","from","from","from","from","from","from","get_top","into","into","into","into","into","into","kernel_stack_position","kstack_alloc","new","new","pid_alloc","process","push_on_top","recycled","tid","trap_cx_bottom_from_tid","trap_cx_ppn","trap_cx_user_va","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ustack_base","ustack_base","ustack_bottom_from_tid","ustack_top","PID2PCB","TASK_MANAGER","TaskManager","__private_field","__private_field","add","add_task","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","fetch","fetch_task","from","from","from","insert_into_pid2process","into","into","into","new","pid2process","ready_queue","remove","remove_from_pid2process","remove_task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wakeup_task","ProcessControlBlock","ProcessControlBlockInner","alloc_fd","alloc_tid","borrow","borrow","borrow_mut","borrow_mut","children","condvar_list","dealloc_tid","exec","exit_code","fd_table","fork","from","from","get_task","get_user_token","getpid","inner","inner_exclusive_access","into","into","is_zombie","memory_set","mutex_list","new","parent","pid","semaphore_list","signals","task_res_allocator","tasks","thread_count","try_from","try_from","try_into","try_into","type_id","type_id","PROCESSOR","Processor","__private_field","borrow","borrow","borrow_mut","borrow_mut","current","current","current_kstack_top","current_process","current_task","current_trap_cx","current_trap_cx_user_va","current_user_token","deref","from","from","get_idle_task_cx_ptr","idle_task_cx","into","into","new","run_tasks","schedule","take_current","take_current_task","try_from","try_from","try_into","try_into","type_id","type_id","SIGABRT","SIGFPE","SIGILL","SIGINT","SIGSEGV","SignalFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","check_error","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","ne","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","__switch","Blocked","Ready","Running","TaskControlBlock","TaskControlBlockInner","TaskStatus","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","exit_code","from","from","from","get_status","get_trap_cx","get_user_token","inner","inner_exclusive_access","into","into","into","kstack","new","process","res","task_cx","task_status","to_owned","trap_cx_ppn","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MICRO_PER_SEC","MSEC_PER_SEC","TICKS_PER_SEC","TIMERS","TimerCondVar","__private_field","add_timer","borrow","borrow","borrow_mut","borrow_mut","check_timer","cmp","deref","eq","expire_ms","from","from","get_time","get_time_ms","get_time_us","into","into","partial_cmp","remove_timer","set_next_trigger","task","try_from","try_from","try_into","try_into","type_id","type_id","TrapContext","context","enable_timer_interrupt","init","kernel_satp","kernel_sp","sepc","set_kernel_trap_entry","set_user_trap_entry","sstatus","trap_from_kernel","trap_handler","trap_handler","trap_return","x","TrapContext","app_init_context","borrow","borrow_mut","clone","clone_into","fmt","from","into","kernel_satp","kernel_sp","sepc","set_sp","sstatus","to_owned","trap_handler","try_from","try_into","type_id","x"],"q":["os","","","","","","","","","","","","","","","","","","os::board","","","","","","","","","","","","","","","","","","","","","","","","","","","os::config","","","","","","","","","","","os::console","","","","","","","","","","os::drivers","","","os::drivers::block","","","","","","","","","","","","","","os::drivers::block::virtio_blk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::inode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::pipe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::stdio","","","","","","","","","","","","","","","","","","","","","","","","os::lang_items","","os::logging","","","","","","","","","","","","os::mm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::frame_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::heap_allocator","","","","","os::mm::memory_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::page_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::sbi","","","","","","","","","os::sync","","","","","","","","","","","","","","","","","os::sync::condvar","","","","","","","","","","","","","","","","","","","","","os::sync::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::sync::semaphore","","","","","","","","","","","","","","","","","","","","","","os::sync::up","","","","","","","","","","","os::syscall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall::fs","","","","","","","","","os::syscall::process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall::sync","","","","","","","","","","","os::syscall::thread","","","os::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::context","","","","","","","","","","","","","os::task::id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::switch","os::task::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::trap","","","","","","","","","","","","","","","os::trap::context","","","","","","","","","","","","","","","","","","",""],"d":["QEMU riscv-64 virt machine","","Constants in the kernel","SBI console driver, for text output","block device driver","File trait &amp; inode(dir, file, pipe, stdin, stdout)","The panic handler and backtrace","Global logger","Memory management implementation","Print! macro to the host console using the format string …","Println! macro to the host console using the format string …","the rust entry-point of os","SBI call wrappers","Synchronization and interior mutability primitives","Implementation of syscalls","Implementation of process <code>ProcessControlBlock</code> and …","RISC-V timer-related functionality","Trap handling functionality","","clock frequency","","","","","The base address of control registers in …","","","RISCV64 configuration","","Address of the sifive_test mapped device.","","","Exit with specified return code.","Exit qemu with specified exit code.","Encode the exit code using EXIT_FAILURE_FLAG.","Exit QEMU using <code>EXIT_FAILURE</code>, aka <code>1</code>.","","Exit QEMU using <code>EXIT_SUCCESS</code>, aka <code>0</code>, if possible.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create an instance.","","","","clock frequency","kernel heap size","kernel stack size","the max number of syscall","physical memory end address","The base address of control registers in …","page size : 4KB","page size bits: 12","the virtual addr of trapoline","the virtual addr of trap context","user app’s stack size","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","print to the host console using the format string and …","","","","write str to console","","","virtio_blk device driver","","The global block device driver instance: BLOCK_DEVICE with …","VirtIOBlock device driver strcuture for virtio_blk device","","Test the block device","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The global io data queue for virtio_blk device","","VirtIOBlock device driver strcuture for virtio_blk device","","","","","","","","","","allocate memory for virtio_blk device’s io data queue","free memory for virtio_blk device’s io data queue","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new VirtIOBlock driver with VIRTIO0 base_addr for …","translate physical address to virtual address for …","Read a block from the virtio_blk device","","","","","","","","","","translate virtual address to physical address for …","","directory","ordinary regular file","trait File for all file types","null","inode in memory","The flags argument to the open() system call is …","IPC pipe","The stat of a inode","The mode of a inode whether a directory or a file","stdin file for getting chars from console","stdout file for putting chars to console","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","ID of device containing file","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","inode number","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","List all apps in the root directory","Return (read_end, write_end)","file type and mode","","number of hard links","Returns the complement of this set of flags.","Open a file","unused pad","","","read from the file to buf, return the number of bytes read","the file readable?","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","the file writable?","","","write to the file from buf, return the number of bytes …","create new file","inode in memory","inner of inode in memory","The flags argument to the open() system call is …","readyonly","read and write","","truncate file size to 0","writeonly","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","List all apps in the root directory","","create a new inode in memory","Returns the complement of this set of flags.","","Open a file","","read file data into buffer","read all data from the inode in memory","Do not check validity for simplicity Return (readable, …","file readable?","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","file writable?","","write buffer data into file","","","","IPC pipe","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (read_end, write_end)","","","","create readable pipe","","","","","","","","","","","","","","","","","","","","","create writable pipe","stdin file for getting chars from console","stdout file for putting chars to console","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","backtrace function","panic handler","a simple logger","","","","","Returns the argument unchanged.","initiate logger","Calls <code>U::from(self)</code>.","","","","","","","","","tracker for physical page frame allocation and deallocation","The kernel’s initial memory mapping(kernel address space)","map permission corresponding to that in pte: <code>R W X U</code>","address space","page table structure","page table entry structure","Physical Address","Physical Page Number PPN","iterator for phy/virt page number","An abstraction over a buffer passed from user space to …","An iterator over a UserBuffer","Virtual Address","Virtual Page Number VPN","","PhysAddr, VirtAddr, PhysPageNum, VirtPageNum, raw address","areas","","bits of page table entry","A list of buffers","","","","Allocate a physical page frame in FrameTracker style","Physical page frame allocator","Deallocate a physical page frame with a given ppn","","The heap allocator.","initiate heap allocator, frame allocator and kernel space","the kernel token","Address Space <code>MemorySet</code> management of Process","Implementation of <code>PageTableEntry</code> and <code>PageTable</code>.","page table","physical page number","test map function in page table","","step by one element(page number)","Create mutable Vec slice in kernel space from ptr in other …","translate a pointer <code>ptr</code> in other address space to a …","translate a pointer <code>ptr</code> in other address space to a …","Create String in kernel address space from u8 Array(end …","","","","","","","Physical Address","Physical Page Number PPN","","","iterator for phy/virt page number","","","","Virtual Address","Virtual Page Number VPN","Check if the physical address is aligned by page size","Check if the virtual address is aligned by page size","","","","","","","","","","","","","Get the (ceil) physical page number","Get the (ceil) virtual page number","","","","","","","","","","","","","","","","","","","","","Get the (floor) physical page number","Get the (floor) virtual page number","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Get the reference of page(array of bytes)","","Get the mutable reference of physical address","Get the mutable reference of physical address","Get the reference of page table(array of ptes)","Get the immutable reference of physical address","","Get the indexes of the page table entry","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Get the page offset of physical address","Get the page offset of virtual address","","","","","","step by one element(page number)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tracker for physical page frame allocation and deallocation","","","","","","","","","","","","","","","","","","Allocate a physical page frame in FrameTracker style","","Deallocate a physical page frame with a given ppn","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new FrameTracker","","physical page number","","","","","","","","","","","","","","","","","","The kernel’s initial memory mapping(kernel address space)","","map permission corresponding to that in pte: <code>R W X U</code>","","address space","Readable","Accessible in U mode","Writable","Excutable","","Change page table by writing satp CSR Register.","Returns the set containing all flags.","append the area to new_end","","areas","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","data: start-aligned but maybe with shorter length assume …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Include sections in elf and trampoline and TrapContext and …","Create a new address space by copy code&amp;data from a exited …","","","Inserts the specified flags in-place.","Assume that no conflicts.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","the kernel token","","","","Mention that trampoline is not collected by areas.","","","","Create a new empty <code>MemorySet</code>.","Without kernel stacks.","Returns the complement of this set of flags.","page table","","Add a new MapArea into this MemorySet. Assuming that there …","Remove all <code>MapArea</code>","test map function in page table","Removes the specified flags in-place.","remove a area","","","Inserts or removes the specified flags depending on the …","shrink the area to new_end","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Get he page table token","Translate a virtual page number to a page table entry","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","page table entry flags","page table structure","page table entry structure","","","An abstraction over a buffer passed from user space to …","An iterator over a UserBuffer","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","bits of page table entry","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","A list of buffers","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Create an empty page table entry","","The page pointered by page table entry is executable?","","","","Get the flags from the page table entry","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Temporarily used to get arguments from user space.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The page pointered by page table entry is valid?","Get the length of the buffer","set the map between virtual page number and physical page …","","Create a new page table","Constuct UserBuffer","Create a new page table entry","","Returns the complement of this set of flags.","","Get the physical page number from the page table entry","The page pointered by page table entry is readable?","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","get the token from the page table","get the page table entry from the virtual page number","get the physical address from the virtual address","Create mutable Vec slice in kernel space from ptr in other …","translate a pointer <code>ptr</code> in other address space to a …","translate a pointer <code>ptr</code> in other address space to a …","Create String in kernel address space from u8 Array(end …","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","remove the map between virtual page number and physical …","The page pointered by page table entry is writable?","console getchar sbi call id","console putchar sbi call id","set timer sbi call id","shutdown sbi call id","use sbi call to getchar from console (qemu uart handler)","use sbi call to putchar in console (qemu uart handler)","general sbi call","use sbi call to set timer","use sbi call to shutdown the kernel","Condition variable structure","Mutex trait","Blocking Mutex struct","Spinlock Mutex struct","semaphore structure","Wrap a static data structure inside it so that we are able …","Conditian variable","Condition variable inner","","semaphore inner","inner data","Lock the mutex","","Mutex (spin-like and blocking(sleep))","Semaphore","Unlock the mutex","Safe Cell for uniprocessor（single cpu core）","Condition variable structure","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Condition variable inner","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new condition variable","Signal a task waiting on the condition variable","","","","","","","blocking current task, let it wait on the condition …","","Mutex trait","Blocking Mutex struct","","Spinlock Mutex struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lock the mutex","Lock the spinlock mutex","lock the blocking mutex","","","Create a new spinlock mutex","Create a new blocking mutex","","","","","","","","","","Unlock the mutex","","unlock the blocking mutex","","semaphore structure","","","","","","","down operation of semaphore","Returns the argument unchanged.","Returns the argument unchanged.","semaphore inner","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new semaphore","","","","","","","up operation of semaphore","","Wrap a static data structure inside it so that we are able …","","","Panic if the data has been borrowed.","Returns the argument unchanged.","inner data","Calls <code>U::from(self)</code>.","User is responsible to guarantee that inner struct is only …","","","","close syscall","condvar_create syscall","condvar_signal syscall","condvar_wait syscallca","dup syscall","enable deadlock detect syscall","exec syscall","exit syscall","fork syscall","fstat syscall","getpid syscall","gettid syscall","gettimeofday syscall","kill syscall","linkat syscall","mmap syscall","munmap syscall","mutex_create syscall","mutex_lock syscall","mutex_unlock syscall","openat syscall","pipe syscall","read syscall","semaphore_create syscall","semaphore_down syscall","semaphore_up syscall","set priority syscall","sleep syscall","spawn syscall","task info syscall","thread_create syscall","unlinkat syscall","waitpid syscall","waittid syscall","write syscall","yield syscall","","","","handle syscall exception with <code>syscall_id</code> and other …","","close syscall","dup syscall","YOUR JOB: Implement fstat.","YOUR JOB: Implement linkat.","open sys","pipe syscall","read syscall","YOUR JOB: Implement unlinkat.","write syscall","Task information","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Task status in it’s life cycle","exec syscall","exit syscall","fork child process syscall","get_time syscall","getpid syscall","kill syscall","mmap syscall","munmap syscall","set priority syscall","change data segment size spawn syscall YOUR JOB: Implement …","task_info syscall","waitpid syscall","yield syscall","The numbers of syscall called by task","Total running time of task","","","","","","","","condvar create syscall","condvar signal syscall","condvar wait syscall","enable deadlock detection syscall","mutex create syscall","mutex lock syscall","mutex unlock syscall","semaphore create syscall","semaphore down syscall","semaphore up syscall","sleep syscall","get current thread id syscall","thread create syscall","wait for a thread to exit syscall","","","blocked","The idle task’s pid is 0","Creation of initial process","Kernel stack for a task","A handle to a pid","ready to run","running","Signal flags","task context structure containing some registers","Task control block structure","The execution status of the current process","","Add init process to the manager","Add a task to ready queue","","Make current task blocked and switch to the next task.","","","Check if the current task has any signal to handle","Implementation of <code>TaskContext</code>","Add signal to the current task","get the top addr of kernel stack","get current process","Get a copy of the current task","Get the mutable reference to trap context of current task","get the user virtual address of trap context","Get the current user token(addr of page table)","","Exit the current ‘Running’ task and run the next task …","Returns the argument unchanged.","Allocator for pid, task user resource, kernel stack using …","mutable","Calls <code>U::from(self)</code>.","Kernel stack corresponding to PID","Allocate a kernel stack for a task","Implementation of <code>TaskManager</code>","Get process by pid","Allocate a pid for a process","Implementation of  <code>ProcessControlBlock</code>","immutable","Implementation of <code>Processor</code> and Intersection of control …","Ret position after task switching","Remove item(pid, _some_pcb) from PDI2PCB map (called by …","the inactive(blocked) tasks are removed when the PCB is …","Remove a task from the ready queue","The main part of process execution and scheduling Loop …","s0-11 register, callee saved","Return to idle control flow for new scheduling","Signal flags and function for convert signal flag to …","Stack pointer","Make current task suspended and switch to the next task","provides __switch asm function to switch between two task …","Get current task through take, leaving a None in its place","Types related to task management &amp; Functions for …","","","","Wake up a task","task context structure containing some registers","","","Returns the argument unchanged.","Create a new task context with a trap return addr and a …","Calls <code>U::from(self)</code>.","Ret position after task switching","s0-11 register, callee saved","Stack pointer","","","","Create a new empty task context","","","The idle task’s pid is 0","Global allocator for kernel stack","Kernel stack for a task","Glocal allocator for pid","A handle to a pid","Allocator with a simple recycle strategy","User Resource for a task","","","allocate a new item","alloc task id","Allocate user resource for a task","","","","","","","","","","","","","","deallocate an item","dealloc task id","Deallocate user resource for a task","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","return the top of the kernel stack","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (bottom, top) of a kernel stack in kernel space.","Allocate a kernel stack for a task","Create a new allocator","Create a new TaskUserRes (Task User Resource)","Allocate a pid for a process","process belongs to","Push a variable of type T into the top of the KernelStack …","","task id","Return the bottom addr (low addr) of the trap context for …","The physical page number(ppn) of the trap context for a …","The bottom usr vaddr (low addr) of the trap context for a …","","","","","","","","","","","","","","","","","","","the bottom addr (low addr) of the user stack for a task","user stack base","Return the bottom addr (high addr) of the user stack for a …","the top addr (high addr) of the user stack for a task","PID2PCB instance (map of pid to pcb)","TASK_MANAGER instance through lazy_static!","A array of <code>TaskControlBlock</code> that is thread-safe","","","Add process back to ready queue","Add a task to ready queue","","","","","","","","","Take a process out of the ready queue","Fetch a task out of the ready queue","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Insert item(pid, pcb) into PID2PCB map (called by do_fork …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creat an empty TaskManager","Get process by pid","","","Remove item(pid, _some_pcb) from PDI2PCB map (called by …","Remove a task from the ready queue","","","","","","","","","","Wake up a task","Process Control Block","Inner of Process Control Block","allocate a new file descriptor","allocate a new task id","","","","","children process","condvar list","deallocate a task id","Only support processes with a single thread.","exit code","file descriptor table","Only support processes with a single thread.","Returns the argument unchanged.","Returns the argument unchanged.","get a task with tid in this process","get the address of app’s page table","get pid","mutable","inner_exclusive_access","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is zombie?","memory set(address space)","mutex list","new process from elf file","parent process","immutable","semaphore list","signal flags","task resource allocator","tasks(also known as threads)","the count of tasks(threads) in this process","","","","","","","","Processor management structure","","","","","","Get current task in cloning semanteme","","get the top addr of kernel stack","get current process","Get a copy of the current task","Get the mutable reference to trap context of current task","get the user virtual address of trap context","Get the current user token(addr of page table)","","Returns the argument unchanged.","Returns the argument unchanged.","Get mutable reference to <code>idle_task_cx</code>","The basic control flow of each core, helping to select and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The main part of process execution and scheduling Loop …","Return to idle control flow for new scheduling","Get current task in moving semanteme","Get current task through take, leaving a None in its place","","","","","","","Abort","Floating point exception","Illegal instruction","Interrupt","Segmentation fault","Signal flags","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","convert signal flag to integer &amp; string","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Switch to the context of <code>next_task_cx_ptr</code>, saving the …","blocked","ready to run","running","Task control block structure","","The execution status of the current process","","","","","","","","","","It is set when active exit or execution error occurs","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the address of app’s page table","mutable","Get the mutable reference of the inner TCB","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kernel stack corresponding to PID","Create a new task","immutable","","Save task context","Maintain the execution status of the current process","","The physical page number of the frame where the trap …","","","","","","","","","","The number of microseconds per second","The number of milliseconds per second","The number of ticks per second","TIMERS: global instance: set of timer condvars","condvar for timer","","Add a timer","","","","","Check if the timer has expired","","","","The time when the timer expires, in milliseconds","Returns the argument unchanged.","Returns the argument unchanged.","Get the current time in ticks","Get the current time in milliseconds","get current time in microseconds","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Remove a timer","Set the next timer interrupt","The task to be woken up when the timer expires","","","","","","","trap context structure containing sstatus, sepc and …","Implementation of <code>TrapContext</code>","enable timer interrupt in supervisor mode","Initialize trap handling","Token of kernel address space","Kernel stack pointer of the current application","Supervisor Exception Program Counter","set trap entry for traps happen in kernel(supervisor) mode","set trap entry for traps happen in user mode","Supervisor Status Register","handle trap from kernel","trap handler","Virtual address of trap handler entry point in kernel","return to user space","General-Purpose Register x0-31","trap context structure containing sstatus, sepc and …","init the trap context of an application","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Token of kernel address space","Kernel stack pointer of the current application","Supervisor Exception Program Counter","put the sp(stack pointer) into x[2] field of TrapContext","Supervisor Status Register","","Virtual address of trap handler entry point in kernel","","","","General-Purpose Register x0-31"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,93,3,0,93,3,93,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,8,8,8,8,0,0,0,17,0,0,11,0,11,11,11,11,11,11,11,11,0,17,0,0,0,0,13,17,94,13,17,94,13,13,94,94,17,94,13,17,94,13,17,94,17,17,94,13,17,94,13,17,94,13,94,17,18,18,0,18,0,0,0,0,0,0,0,18,18,18,18,18,18,25,18,18,18,22,18,22,18,34,18,18,18,18,18,22,18,18,18,18,22,18,18,18,18,18,22,18,18,18,18,18,18,26,22,0,18,18,18,22,18,18,18,0,0,22,18,22,18,0,22,18,0,95,95,26,34,18,18,0,18,18,18,18,18,22,18,22,18,22,18,18,95,26,34,95,25,0,0,0,25,25,0,25,25,28,25,25,25,25,25,25,25,25,25,26,96,28,25,26,96,28,25,25,25,25,25,25,28,25,25,25,25,25,25,25,25,25,26,96,28,25,25,25,25,25,25,26,96,25,25,25,26,96,28,25,25,25,0,25,26,25,96,0,25,26,26,25,26,26,25,25,25,25,25,25,25,26,96,28,25,26,96,28,25,26,96,28,25,25,26,26,26,33,33,33,0,0,0,0,32,32,32,32,34,32,33,34,32,33,34,33,33,33,34,32,33,32,34,32,33,0,32,34,32,34,34,34,32,32,32,33,34,32,33,34,32,33,34,32,33,34,34,34,32,32,34,0,0,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,0,0,0,38,38,38,38,38,0,38,38,38,38,38,44,45,42,46,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,53,54,59,27,61,61,61,0,0,0,56,0,0,0,0,0,53,41,0,56,97,0,0,0,0,44,45,42,46,0,0,0,0,0,0,0,0,0,0,0,0,44,45,49,44,45,42,46,48,49,44,45,42,46,48,44,45,44,45,42,46,48,44,45,42,46,48,44,45,42,46,49,49,44,45,42,46,44,45,44,45,42,46,49,44,44,44,45,45,45,42,42,42,46,46,46,48,42,48,44,42,42,44,48,46,49,44,45,42,46,48,49,48,48,44,45,42,46,49,48,49,44,45,44,45,42,46,48,97,42,46,44,45,42,46,48,49,44,45,42,46,48,49,44,45,42,46,48,49,44,45,42,46,48,0,0,0,0,0,51,98,50,41,50,51,41,50,51,50,98,50,51,41,50,41,0,0,0,41,50,51,50,0,41,50,51,98,41,50,41,50,41,50,51,41,50,51,41,50,51,0,0,0,0,0,57,57,0,0,0,0,0,54,54,54,54,58,53,54,53,55,53,54,54,54,54,54,54,54,54,53,55,58,57,54,53,55,58,57,54,57,54,57,54,54,54,54,55,55,58,54,0,0,0,54,57,54,0,0,54,57,54,54,54,54,54,53,55,58,57,54,55,54,54,54,53,53,54,54,54,53,54,54,53,55,58,57,54,54,54,0,55,55,55,53,55,54,55,53,53,54,53,54,53,53,0,54,53,0,0,54,53,55,0,0,0,54,54,54,57,54,54,53,53,53,55,58,57,54,53,55,58,57,54,53,55,58,57,54,54,55,55,55,60,60,60,0,0,0,60,60,0,0,60,60,60,60,60,60,60,60,60,60,59,60,60,56,27,61,60,59,56,27,61,60,59,27,61,60,59,60,59,60,60,60,61,61,60,60,59,60,59,60,56,56,59,60,60,60,60,60,56,56,27,61,60,59,60,60,60,60,56,60,60,60,60,56,27,61,60,59,27,61,60,60,59,27,56,60,56,27,59,61,60,60,59,59,60,56,60,60,60,60,60,59,60,56,56,56,0,0,0,0,56,27,61,60,59,56,27,61,60,59,56,27,61,60,59,60,56,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,65,66,14,63,64,0,0,63,0,0,0,62,99,62,99,62,99,62,62,99,62,62,62,99,62,99,62,99,62,99,0,0,0,0,64,65,100,64,65,100,64,65,100,65,64,65,100,63,64,65,64,100,64,65,64,65,100,64,65,100,64,65,100,63,64,65,100,0,0,66,101,66,101,101,66,66,101,66,66,101,66,66,101,66,101,66,101,66,101,0,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,69,70,69,69,70,69,70,69,69,70,0,0,0,0,0,0,0,0,0,0,0,0,0,70,70,70,69,70,69,70,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,76,89,0,0,0,0,89,89,0,0,0,0,75,0,0,72,0,75,75,0,0,0,0,0,0,0,0,0,75,0,75,0,71,75,71,0,0,0,0,0,71,0,78,0,0,0,0,78,0,0,78,0,0,0,0,75,75,75,0,0,78,78,78,78,78,78,78,78,78,78,78,78,77,76,0,0,0,0,0,0,0,81,82,79,80,80,79,77,76,80,81,82,79,77,76,80,81,82,79,79,80,80,81,82,77,76,80,79,77,76,80,81,82,76,79,77,76,80,81,82,0,0,79,80,0,80,76,79,80,0,80,80,79,77,76,80,81,82,79,77,76,80,81,82,79,77,76,80,81,82,80,80,0,80,0,0,0,84,85,83,0,83,84,85,83,84,85,84,85,83,0,83,84,85,0,83,84,85,83,0,83,83,0,0,83,84,85,83,84,85,83,84,85,0,0,0,86,86,73,86,73,86,86,86,86,73,86,86,73,73,86,86,86,73,73,73,73,86,86,86,86,73,86,73,86,86,86,86,86,73,86,73,86,73,86,0,0,88,87,88,87,88,87,87,0,0,0,0,0,0,88,87,88,87,87,87,88,87,0,0,87,0,87,88,87,88,87,88,72,72,72,72,72,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,89,89,89,0,0,0,71,90,89,71,90,89,89,89,89,90,71,90,89,90,90,71,71,71,71,90,89,71,71,71,90,90,90,89,90,71,90,89,71,90,89,71,90,89,0,0,0,0,0,92,0,91,92,91,92,0,91,92,91,91,91,92,0,0,0,91,92,91,0,0,91,91,92,91,92,91,92,0,0,0,0,74,74,74,0,0,74,0,0,74,0,74,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74],"f":[0,[[]],0,0,0,0,0,0,0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[2,1],[[3,2],1],[2,2],[[],1],[3,1],[[],1],[3,1],[[]],[[]],[4,3],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[7],[[],5],[[],5],[[],6],[[8,9],10],0,0,0,0,0,0,0,[[]],[[]],[[]],[11,12],[[]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13,14],[15,15],[[15,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[15,15],[[17,15]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[15,15],[[17,15]],0,0,0,0,0,0,0,0,0,0,0,[[],18],[[18,18],18],[[18,18]],[[18,18],18],[[18,18]],[18,2],0,0,[[18,18],18],[[18,18]],[[]],[[]],[[]],[[]],0,[18,18],[[]],[[18,18],19],[18,18],[[18,18],20],0,[[18,18],18],[[],18],[[18,18],20],[[18,21]],[[22,23],10],[[18,23],10],[[18,23],10],[[18,23],10],[[18,23],10],[[18,23],10],[[]],[[]],[2,[[24,[18]]]],[2,18],[2,18],[21,18],[18],0,0,0,[[18,18]],[[18,18],18],[[18,18],20],[[]],[[]],[18,20],[18,20],[[]],[[]],0,[[18,18],20],0,[18,18],[[9,25],[[24,[[12,[26]]]]]],0,[[18,18],[[24,[19]]]],0,[27,15],[[],20],0,0,[[18,18]],[[18,18,20]],0,[[18,18],18],[[18,18]],[[18,18],18],[[]],[[18,18]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[18,18],18],[[],20],0,0,[27,15],0,0,0,0,0,0,0,0,0,0,[[],25],[[25,25],25],[[25,25]],[[25,25],25],[[25,25]],[25,2],0,[[25,25],25],[[25,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,25],[[]],[[25,25],19],[25,25],[[25,25],20],[28,12],[[25,25],25],[[],25],[[25,25],20],[[25,21]],[[25,23],10],[[25,23],10],[[25,23],10],[[25,23],10],[[25,23],10],[[]],[[]],[[]],[[]],[2,[[24,[25]]]],[2,25],[2,25],[21,25],[25],0,0,[[25,25]],[[25,25],25],[[25,25],20],[[]],[[]],[[]],[[]],[25,20],[25,20],[[]],[[25,25],20],[[20,20,[12,[29]]],26],[25,25],0,[[9,25],[[24,[[12,[26]]]]]],[[25,25],[[24,[19]]]],[[26,27],15],[26,[[31,[30]]]],[25],[26,20],0,[[25,25]],[[25,25,20]],[[25,25],25],[[25,25]],[[25,25],25],[[]],[[25,25]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[25,25],25],[26,20],0,[[26,27],15],0,0,0,0,0,0,0,[32,20],0,[32,15],[32,15],[[]],[[]],[[]],[[]],[[]],[[]],0,[33,33],[[]],[[33,33],20],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],32],[[34,27],15],[32,30],[[[12,[[14,[32]]]]],34],[34,20],0,[[32,12]],0,0,[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[34,20],0,[[34,27],15],[[32,30]],0,[[[12,[[14,[32]]]]],34],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[35,27],15],[[36,27],15],[35,20],[36,20],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[35,20],[36,20],[[35,27],15],[[36,27],15],[[]],[37,1],0,[[]],[[]],[[38,39],20],[38],[[]],[[]],[[]],[[38,40]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[24,[41]]]],0,[42],0,0,[[]],[[],15],0,0,0,0,[[]],0,[[]],[[15,30,15],31],[15],[15],[[15,30],43],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[44,20],[45,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,42],[45,46],[44,44],[45,45],[42,42],[46,46],[[[48,[47]]],[[48,[47]]]],[[]],[[]],[[]],[[]],[[]],[[44,44],19],[[45,45],19],[[42,42],19],[[46,46],19],0,0,[[44,44],20],[[45,45],20],[[42,42],20],[[46,46],20],[44,42],[45,46],[[44,23],10],[[45,23],10],[[42,23],10],[[46,23],10],[[]],[[]],[42,44],[15,44],[[]],[46,45],[15,45],[[]],[44,42],[15,42],[15,46],[[]],[45,46],[[]],[42],[48],[44],[42],[42],[44],[48],[46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48],0,[[44,44],20],[[45,45],20],[[42,42],20],[[46,46],20],[[],49],[[],48],[49,24],[44,15],[45,15],[[44,44],[[24,[19]]]],[[45,45],[[24,[19]]]],[[42,42],[[24,[19]]]],[[46,46],[[24,[19]]]],0,[[]],[42],[46],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,0,0,0,0,[[],[[24,[42]]]],[50,[[24,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[42],[[50,42]],[51,14],[41],0,[[41,23],10],[[],[[24,[41]]]],[[]],[42],[[]],[[]],[[]],[[50,42,42]],[[]],[[]],[[]],[[]],[[]],[42,41],[[],50],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,0,[52,1],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[53],[[],54],[[53,45,45],20],[[55,56,46]],0,[[54,54],54],[[54,54]],[[54,54],54],[[54,54]],[54,30],0,[[54,54],54],[[54,54]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[54,54],[[]],[[]],[[54,54],19],[54,54],[[54,54],20],[[55,56]],0,[58,12],[[54,54],54],0,0,0,[[],54],[[57,57],20],[[54,54],20],0,0,[[54,21]],[[57,23],10],[[54,23],10],[[54,23],10],[[54,23],10],[[54,23],10],[[54,23],10],[[]],[[]],[[]],[[]],[[]],[55,55],[30,[[24,[54]]]],[30,54],[30,54],[[]],[53,53],[21,54],[54],[[54,54]],[[53,45,45,54]],[[54,54],54],[[54,54],20],[[]],[[]],[[]],[[]],[[]],[54,20],[54,20],[[],15],[[55,56]],[[55,56,46]],0,[53],0,[[54,54],20],[[45,45,57,54],55],[[],53],[[],53],[54,54],0,[[54,54],[[24,[19]]]],[[53,55,24]],[53],[[]],[[54,54]],[[53,46]],0,0,[[54,54,20]],[[53,45,45],20],[[55,56,46]],0,0,0,[[54,54],54],[[54,54]],[[54,54],54],[[]],[[]],[[54,54]],[53,15],[[53,46],[[24,[59]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[54,54],54],[[55,56]],[[55,56,46]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],60],[[60,60],60],[[60,60]],[[60,60],60],[[60,60]],[60,30],0,0,[[60,60],60],[[60,60]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[60,60],[59,59],[[]],[[]],[[60,60],19],[60,60],[[60,60],20],0,0,[[60,60],60],[[],60],[[],59],[[60,60],20],[59,20],[[60,21]],[[56,46],[[24,[59]]]],[[56,46],[[24,[59]]]],[59,60],[[60,23],10],[[60,23],10],[[60,23],10],[[60,23],10],[[60,23],10],0,[[]],[[]],[[]],[[]],[[]],[30,[[24,[60]]]],[30,60],[30,60],[21,60],[15,56],[60],[[60,60]],[[60,60],60],[[60,60],20],[[]],[[]],[[]],[[]],[[]],[27],[[]],[60,20],[60,20],[59,20],[27,15],[[56,46,42,60]],[[60,60],20],[[],56],[31,27],[[42,60],59],[61,24],[60,60],[[60,60],[[24,[19]]]],[59,42],[59,20],[[60,60]],0,[[60,60,20]],[[60,60],60],[[60,60]],[[60,60],60],[[]],[[]],[[60,60]],[56,15],[[56,46],[[24,[59]]]],[[56,45],[[24,[44]]]],[[15,30,15],31],[15],[15],[[15,30],43],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[60,60],60],[[56,46]],[59,20],0,0,0,0,[[],15],[15],[[15,15,15,15],15],[15],[[],1],0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],62],[62],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[62,[12,[63]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[64],[65],0,0,[[],64],[[],65],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[]],[64],[65],0,0,0,[[]],[[]],[[]],[[]],0,[66],[[]],[[]],0,[[]],[[]],[15,66],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[66],0,0,[[]],[[]],[14,67],[[]],0,[[]],[[],14],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,68],0,[15,68],[15,68],[[15,22],68],[[30,30],68],[[30,2],68],[15,68],[[15,30,15],68],[30,68],[[15,30,15],68],0,0,[[]],[[]],[[]],[[]],[[69,23],10],[[]],[[]],[[]],[[]],0,0,[[30,15],68],[16,1],[[],68],[[69,15],68],[[],68],[[15,2],68],[[15,15,15],68],[[15,15],68],[68,68],[30,68],[70,68],[[68,16],68],[[],68],0,0,[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,[[],68],[15,68],[[15,15],68],[15,68],[20,68],[15,68],[15,68],[15,68],[15,68],[15,68],[15,68],[[],68],[[15,15],68],[15,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[[12,[71]]]],0,[[]],[[]],[[]],[[],24],0,[72],[[],15],[[],[[12,[73]]]],[[],[[24,[[12,[71]]]]]],[[],74],[[],15],[[],15],[75,12],[16],[[]],0,0,[[]],0,[[],76],0,[15,[[24,[[12,[73]]]]]],[[],77],0,0,0,0,[15],[[[12,[71]]]],[[[12,[71]]]],[[]],0,[78],0,0,[[]],0,[[],[[24,[[12,[71]]]]]],0,[[],5],[[],5],[[],6],[[[12,[71]]]],0,[[]],[[]],[[]],[15,78],[[]],0,0,0,[[],5],[[],5],[[],6],[[],78],0,0,0,0,0,0,0,0,0,0,0,[79,15],[80],[80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[79,15]],[80],[80],[81,14],[82,14],[77],[76],[80],[[]],[[]],[[]],[[]],[[]],[[]],[76,15],[[]],[[]],[[]],[[]],[[]],[[]],[15],[[],76],[[],79],[[[12,[73]],15,20],80],[[],77],0,[76],0,0,[15,15],[80,42],[80,15],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[80,15],0,[[15,15],15],[80,15],0,0,0,0,0,[[83,[12,[71]]]],[[[12,[71]]]],[[]],[[]],[[]],[[]],[[]],[[]],[84,14],[85,14],[83,[[24,[[12,[71]]]]]],[[],[[24,[[12,[71]]]]]],[[]],[[]],[[]],[[15,[12,[73]]]],[[]],[[]],[[]],[[],83],[15,[[24,[[12,[73]]]]]],0,[[83,[12,[71]]]],[15],[[[12,[71]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[[12,[71]]]],0,0,[86,15],[86,15],[[]],[[]],[[]],[[]],0,0,[[86,15]],[[12,[31,[43]]]],0,0,[12,[[12,[73]]]],[[]],[[]],[[86,15],[[12,[71]]]],[86,15],[73,15],0,[73,[[67,[86]]]],[[]],[[]],0,0,0,[[],[[12,[73]]]],0,0,0,0,0,0,[86,15],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,0,[[]],[[]],[[]],[[]],[87,[[24,[[12,[71]]]]]],0,[[],15],[[],[[12,[73]]]],[[],[[24,[[12,[71]]]]]],[[],74],[[],15],[[],15],[88,14],[[]],[[]],[87,78],0,[[]],[[]],[[],87],[[]],[78],[87,[[24,[[12,[71]]]]]],[[],[[24,[[12,[71]]]]]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,0,0,0,0,[[],72],[[72,72],72],[[72,72]],[[72,72],72],[[72,72]],[72,2],0,[[72,72],72],[[72,72]],[[]],[[]],[72,24],[72,72],[[]],[[72,72],19],[72,72],[[72,72],20],[[72,72],72],[[],72],[[72,72],20],[[72,21]],[[72,23],10],[[72,23],10],[[72,23],10],[[72,23],10],[[72,23],10],[[]],[2,[[24,[72]]]],[2,72],[2,72],[21,72],[72],[[72,72]],[[72,72],72],[[72,72],20],[[]],[72,20],[72,20],[[72,72],20],[72,72],[[72,72],[[24,[19]]]],[[72,72]],[[72,72,20]],[[72,72],72],[[72,72]],[[72,72],72],[[]],[[72,72]],[[],5],[[],5],[[],6],[[72,72],72],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[89,89],[[]],[[89,89],20],0,[[]],[[]],[[]],[90,89],[90,74],[71,15],0,[71,[[67,[90]]]],[[]],[[]],[[]],0,[[[12,[73]],15,20],71],0,0,0,0,[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,0,0,0,0,0,[[15,[12,[71]]]],[[]],[[]],[[]],[[]],[[]],[[91,91],19],[92,14],[[91,91],20],0,[[]],[[]],[[],15],[[],15],[[],15],[[]],[[]],[[91,91],[[24,[19]]]],[[[12,[71]]]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,[[]],[[]],0,0,0,[[]],[[]],0,[[],1],[[],1],0,[[],1],0,0,[[15,15,15,15,15],74],[[]],[[]],[74,74],[[]],[[74,23],10],[[]],[[]],0,0,0,[[74,15]],0,[[]],0,[[],5],[[],5],[[],6],0],"p":[[15,"never"],[15,"u32"],[3,"RISCV64"],[15,"u64"],[4,"Result"],[3,"TypeId"],[3,"Arguments"],[3,"Stdout"],[15,"str"],[6,"Result"],[3,"BLOCK_DEVICE"],[3,"Arc"],[3,"QUEUE_FRAMES"],[3,"UPSafeCell"],[15,"usize"],[15,"i32"],[3,"VirtIOBlock"],[3,"StatMode"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[3,"Stat"],[3,"Formatter"],[4,"Option"],[3,"OpenFlags"],[3,"OSInode"],[3,"UserBuffer"],[3,"ROOT_INODE"],[3,"Inode"],[15,"u8"],[3,"Vec"],[3,"PipeRingBuffer"],[4,"RingBufferStatus"],[3,"Pipe"],[3,"Stdin"],[3,"Stdout"],[3,"PanicInfo"],[3,"SimpleLogger"],[3,"Metadata"],[3,"Record"],[3,"FrameTracker"],[3,"PhysPageNum"],[3,"String"],[3,"PhysAddr"],[3,"VirtAddr"],[3,"VirtPageNum"],[8,"Clone"],[3,"SimpleRange"],[3,"SimpleRangeIterator"],[3,"StackFrameAllocator"],[3,"FRAME_ALLOCATOR"],[3,"Layout"],[3,"MemorySet"],[3,"MapPermission"],[3,"MapArea"],[3,"PageTable"],[4,"MapType"],[3,"KERNEL_SPACE"],[3,"PageTableEntry"],[3,"PTEFlags"],[3,"UserBufferIterator"],[3,"Condvar"],[8,"Mutex"],[3,"MutexSpin"],[3,"MutexBlocking"],[3,"Semaphore"],[3,"RefMut"],[15,"isize"],[3,"TimeVal"],[3,"TaskInfo"],[3,"TaskControlBlock"],[3,"SignalFlags"],[3,"ProcessControlBlock"],[3,"TrapContext"],[3,"INITPROC"],[3,"KernelStack"],[3,"PidHandle"],[3,"TaskContext"],[3,"RecycleAllocator"],[3,"TaskUserRes"],[3,"PID_ALLOCATOR"],[3,"KSTACK_ALLOCATOR"],[3,"TaskManager"],[3,"TASK_MANAGER"],[3,"PID2PCB"],[3,"ProcessControlBlockInner"],[3,"Processor"],[3,"PROCESSOR"],[4,"TaskStatus"],[3,"TaskControlBlockInner"],[3,"TimerCondVar"],[3,"TIMERS"],[8,"QEMUExit"],[3,"VirtioHal"],[8,"File"],[3,"OSInodeInner"],[8,"StepByOne"],[8,"FrameAllocator"],[3,"CondvarInner"],[3,"MutexBlockingInner"],[3,"SemaphoreInner"]]},\
"riscv":{"doc":"Low level access to RISC-V processors","t":[0,0,0,0,0,14,14,14,8,8,8,8,8,8,6,6,6,8,6,8,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,0,0,0,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,8,3,3,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,8,11,11,11,11,11,5,5,5,11,11,11,11,11,11,10,11,11,11,11,11,11,18,18,17,18,6,6,6,6,6,16,4,16,13,8,8,8,8,18,13,4,8,8,3,16,3,3,8,16,8,8,16,13,13,13,6,6,6,6,3,3,3,3,3,6,6,13,13,18,18,18,17,17,17,17,6,6,3,6,6,6,3,6,6,6,3,6,18,4,16,18,18,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,3,4,3,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,11,11,11,11,11,3,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,11,11,11,11,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,11,11,11,5,5,5,11,11,11,11,11,11,5,5,11,5,11,5,11,11,11,11,11,11,11,3,11,11,11,5,5,5,5,11,11,11,11,11,5,5,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,3,11,11,11,5,5,5,5,11,11,11,11,11,5,5,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,13,13,13,4,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,5,11,5,11,11,5,11,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,3,11,11,11,5,5,5,11,11,11,11,11,5,5,11,5,11,5,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,13,4,13,13,13,13,13,4,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,3,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,5,5,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,3,11,11,11,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,5,5,5,3,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,13,13,13,4,13,4,13,3,13,13,13,4,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,5,11,5,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,5,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,5,13,4,13,13,13,13,13,13,4,13,13,13,13,3,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,3,11,11,11,5,5,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,5,2,4,3,13,13,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,5,11,5,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,2,11,11,11,11,11,11,11,11,5,11,11,11,11,5,5,5,5,3,11,11,11,11,11,11,11,5,11,11,11,5,5,3,11,11,11,5,5,5,11,11,11,11,5,5,5,5,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,3,11,11,5,11,11,11,11,5,5,5,11,11,11,11,11,5,2,3,11,11,11,11,11,11,11,11,5,11,11,11,11,5,13,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,5,5,3,11,11,11,5,5,5,11,11,11,11,11,5,11,5,11,5,11,5,11,11,11,11,11,11,11,3,11,11,11,5,5,5,11,11,11,11,11,5,11,5,11,5,11,5,11,11,11,11,11,11,11,5,5,13,13,13,4,3,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,5,11,5,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["addr","asm","interrupt","paging","register","use_sv32","use_sv39","use_sv48","Address","AddressL2","AddressL3","AddressL4","AddressX32","AddressX64","Frame","Page","PhysAddr","PhysicalAddress","VirtAddr","VirtualAddress","as_mut","as_u32","as_u64","as_usize","from_page_table_indices","from_page_table_indices","from_page_table_indices","gpax4","new","new_u32","new_u64","p1_index","p1_index","p1_index","p2_index","p2_index","p2_index","p3_index","p3_index","p4_index","page","page_number","page_offset","sv32","sv39","sv48","to_4k_aligned","GPAddrSv32X4","GPAddrSv39X4","GPAddrSv48X4","as_mut","as_mut","as_mut","as_u64","as_u64","as_u64","as_usize","as_usize","as_usize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_page_table_indices","from_page_table_indices","from_page_table_indices","into","into","into","ne","ne","ne","new","new","new","new_u64","new_u64","new_u64","p1_index","p1_index","p1_index","p2_index","p2_index","p2_index","p3_index","p3_index","p4_index","page_number","page_number","page_number","page_offset","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","to_4k_aligned","to_4k_aligned","to_4k_aligned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BIT_LENGTH","BitField","FrameWith","PageWith","PageWithL2","PageWithL3","PageWithL4","as_kernel_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","from","from","from_page_table_indices","from_page_table_indices","from_page_table_indices","from_page_table_indices","from_page_table_indices","from_page_table_indices","from_page_table_indices","from_page_table_indices","from_page_table_indices","get_bit","get_bits","into","into","ne","ne","number","number","of_addr","of_addr","of_ppn","of_vpn","p1_index","p1_index","p1_index","p1_index","p1_index","p1_index","p1_index","p1_index","p1_index","p2_index","p2_index","p2_index","p2_index","p2_index","p2_index","p2_index","p2_index","p2_index","p3_index","p3_index","p3_index","p3_index","p3_index","p3_index","p4_index","p4_index","p4_index","partial_cmp","partial_cmp","set_bit","set_bits","start_address","start_address","try_from","try_from","try_into","try_into","type_id","type_id","PhysAddrSv32","VirtAddrSv32","as_mut","as_u32","as_u64","as_usize","as_usize","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","from","from","from_page_table_indices","into","into","ne","ne","new","new","new_u32","new_u64","p1_index","p2_index","page_number","page_number","page_offset","page_offset","partial_cmp","partial_cmp","to_4k_aligned","to_4k_aligned","try_from","try_from","try_into","try_into","type_id","type_id","PhysAddrSv39","VirtAddrSv39","as_mut","as_u64","as_u64","as_usize","as_usize","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","from","from","from_page_table_indices","into","into","ne","ne","new","new","new_u64","new_u64","p1_index","p2_index","p3_index","page_number","page_number","page_offset","page_offset","partial_cmp","partial_cmp","to_4k_aligned","to_4k_aligned","try_from","try_from","try_into","try_into","type_id","type_id","PhysAddrSv48","VirtAddrSv48","as_mut","as_u64","as_u64","as_usize","as_usize","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","from","from","from_page_table_indices","into","into","ne","ne","new","new","new_u64","new_u64","p1_index","p2_index","p3_index","p4_index","page_number","page_number","page_offset","page_offset","partial_cmp","partial_cmp","to_4k_aligned","to_4k_aligned","try_from","try_from","try_into","try_into","type_id","type_id","ebreak","hfence_gvma","hfence_vvma","hlv_b","hlv_bu","hlv_d","hlv_h","hlv_hu","hlv_w","hlv_wu","hlvx_hu","hlvx_wu","hsv_b","hsv_d","hsv_h","hsv_w","sfence_vma","sfence_vma_all","wfi","CriticalSection","Mutex","Nr","borrow","borrow","borrow","borrow_mut","borrow_mut","disable","enable","free","from","from","into","into","new","new","nr","try_from","try_from","try_into","try_into","type_id","type_id","ACCESSED","DIRTY","ENTRY_COUNT","EXECUTABLE","Entries","Entries32","Entries32X4","Entries64","Entries64X4","Entry","FlagUpdateError","Frame","FrameAllocationFailed","FrameAllocator","FrameAllocatorFor","FrameDeallocator","FrameDeallocatorFor","GLOBAL","InvalidFrameAddress","MapToError","Mapper","MapperExt","MapperFlush","MapperFlush","MapperFlushGPA","MapperFlushGPT","MapperFlushable","P","PTE","PTEIterableSlice","Page","PageAlreadyMapped","PageNotMapped","PageNotMapped","PageTable","PageTable32X4","PageTable64X4","PageTableEntry","PageTableEntryX32","PageTableEntryX64","PageTableEntryX64Printer","PageTableFlags","PageTableWith","PageTableX32","PageTableX64","ParentEntryHugePage","ParentEntryHugePage","READABLE","RESERVED1","RESERVED2","RV32_ENTRY_COUNT","RV32_X4_ENTRY_COUNT","RV64_ENTRY_COUNT","RV64_X4_ENTRY_COUNT","Rv32PageTable","Rv32PageTableGuest","Rv32PageTableWith","Rv32PageTableX4","Rv39PageTable","Rv39PageTableGuest","Rv39PageTableWith","Rv39PageTableX4","Rv48PageTable","Rv48PageTableGuest","Rv48PageTableWith","Rv48PageTableX4","USER","UnmapError","V","VALID","WRITABLE","addr","addr","addr","all","alloc","alloc","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","complement","contains","dealloc","dealloc","debug_sv39","debug_sv48","difference","empty","eq","extend","flags","flags","flags","flags_mut","flags_mut","flags_mut","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame","frame","frame","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","identity_map","identity_map","ignore","ignore","ignore","ignore","index","index_mut","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","is_unused","is_unused","is_unused","map_to","map_to","map_to","map_to","ne","new","new","new","new","new","new","new","not","partial_cmp","ppn","ppn","ppn","ppn_u64","ppn_u64","ppn_u64","pte_index","pte_index","pte_index","pte_index","pte_index","pte_index_mut","pte_index_mut","pte_index_mut","pte_index_mut","pte_index_mut","ref_entry","ref_entry","ref_entry","ref_entry","remove","set","set","set","set","set_unused","set_unused","set_unused","sub","sub_assign","symmetric_difference","to_pte_slice","to_pte_slice","to_pte_slice","to_pte_slice","to_pte_slice","to_pte_slice_mut","to_pte_slice_mut","to_pte_slice_mut","to_pte_slice_mut","to_pte_slice_mut","toggle","translate_page","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unmap","unmap","unmap","unmap","update_flags","update_flags","zero","0","fcsr","hcounteren","hedeleg","hgatp","hgeie","hgeip","hideleg","hie","hip","hpmcounter10","hpmcounter10h","hpmcounter11","hpmcounter11h","hpmcounter12","hpmcounter12h","hpmcounter13","hpmcounter13h","hpmcounter14","hpmcounter14h","hpmcounter15","hpmcounter15h","hpmcounter16","hpmcounter16h","hpmcounter17","hpmcounter17h","hpmcounter18","hpmcounter18h","hpmcounter19","hpmcounter19h","hpmcounter20","hpmcounter20h","hpmcounter21","hpmcounter21h","hpmcounter22","hpmcounter22h","hpmcounter23","hpmcounter23h","hpmcounter24","hpmcounter24h","hpmcounter25","hpmcounter25h","hpmcounter26","hpmcounter26h","hpmcounter27","hpmcounter27h","hpmcounter28","hpmcounter28h","hpmcounter29","hpmcounter29h","hpmcounter3","hpmcounter30","hpmcounter30h","hpmcounter31","hpmcounter31h","hpmcounter3h","hpmcounter4","hpmcounter4h","hpmcounter5","hpmcounter5h","hpmcounter6","hpmcounter6h","hpmcounter7","hpmcounter7h","hpmcounter8","hpmcounter8h","hpmcounter9","hpmcounter9h","hstatus","htimedelta","htimedeltah","htinst","htval","hvip","marchid","mcause","mcycle","mcycleh","medeleg","mepc","mhartid","mhpmcounter10","mhpmcounter10h","mhpmcounter11","mhpmcounter11h","mhpmcounter12","mhpmcounter12h","mhpmcounter13","mhpmcounter13h","mhpmcounter14","mhpmcounter14h","mhpmcounter15","mhpmcounter15h","mhpmcounter16","mhpmcounter16h","mhpmcounter17","mhpmcounter17h","mhpmcounter18","mhpmcounter18h","mhpmcounter19","mhpmcounter19h","mhpmcounter20","mhpmcounter20h","mhpmcounter21","mhpmcounter21h","mhpmcounter22","mhpmcounter22h","mhpmcounter23","mhpmcounter23h","mhpmcounter24","mhpmcounter24h","mhpmcounter25","mhpmcounter25h","mhpmcounter26","mhpmcounter26h","mhpmcounter27","mhpmcounter27h","mhpmcounter28","mhpmcounter28h","mhpmcounter29","mhpmcounter29h","mhpmcounter3","mhpmcounter30","mhpmcounter30h","mhpmcounter31","mhpmcounter31h","mhpmcounter3h","mhpmcounter4","mhpmcounter4h","mhpmcounter5","mhpmcounter5h","mhpmcounter6","mhpmcounter6h","mhpmcounter7","mhpmcounter7h","mhpmcounter8","mhpmcounter8h","mhpmcounter9","mhpmcounter9h","mhpmevent10","mhpmevent11","mhpmevent12","mhpmevent13","mhpmevent14","mhpmevent15","mhpmevent16","mhpmevent17","mhpmevent18","mhpmevent19","mhpmevent20","mhpmevent21","mhpmevent22","mhpmevent23","mhpmevent24","mhpmevent25","mhpmevent26","mhpmevent27","mhpmevent28","mhpmevent29","mhpmevent3","mhpmevent30","mhpmevent31","mhpmevent4","mhpmevent5","mhpmevent6","mhpmevent7","mhpmevent8","mhpmevent9","mideleg","mie","mimpid","minstret","minstreth","mip","misa","mscratch","mstatus","mtval","mtvec","mvendorid","pmpaddr0","pmpaddr1","pmpaddr10","pmpaddr11","pmpaddr12","pmpaddr13","pmpaddr14","pmpaddr15","pmpaddr2","pmpaddr3","pmpaddr4","pmpaddr5","pmpaddr6","pmpaddr7","pmpaddr8","pmpaddr9","pmpcfg0","pmpcfg1","pmpcfg2","pmpcfg3","satp","scause","sepc","sie","sip","sscratch","sstatus","stval","stvec","time","timeh","ucause","uepc","uie","uip","uscratch","ustatus","utval","utvec","vsatp","vscause","vsepc","vsie","vsip","vsscratch","vsstatus","vstval","vstvec","DZ","FCSR","Flag","Flags","Invalid","NV","NX","OF","RoundDown","RoundToNearestEven","RoundToNearestMaxMagnitude","RoundTowardsZero","RoundUp","RoundingMode","UF","bits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_flag","clear_flags","clone","clone","clone","clone","dz","eq","fflags","fmt","fmt","fmt","fmt","frm","from","from","from","from","into","into","into","into","nv","nx","of","read","set_rounding_mode","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uf","Hcounteren","bits","borrow","borrow_mut","clear_cy","clear_hpm10","clear_hpm11","clear_hpm12","clear_hpm13","clear_hpm14","clear_hpm15","clear_hpm16","clear_hpm17","clear_hpm18","clear_hpm19","clear_hpm20","clear_hpm21","clear_hpm22","clear_hpm23","clear_hpm24","clear_hpm25","clear_hpm26","clear_hpm27","clear_hpm28","clear_hpm29","clear_hpm3","clear_hpm30","clear_hpm31","clear_hpm4","clear_hpm5","clear_hpm6","clear_hpm7","clear_hpm8","clear_hpm9","clear_ir","clear_tm","clone","cy","fmt","from","from_bits","hpm10","hpm11","hpm12","hpm13","hpm14","hpm15","hpm16","hpm17","hpm18","hpm19","hpm20","hpm21","hpm22","hpm23","hpm24","hpm25","hpm26","hpm27","hpm28","hpm29","hpm3","hpm30","hpm31","hpm4","hpm5","hpm6","hpm7","hpm8","hpm9","into","ir","read","set_cy","set_cy","set_hpm10","set_hpm10","set_hpm11","set_hpm11","set_hpm12","set_hpm12","set_hpm13","set_hpm13","set_hpm14","set_hpm14","set_hpm15","set_hpm15","set_hpm16","set_hpm16","set_hpm17","set_hpm17","set_hpm18","set_hpm18","set_hpm19","set_hpm19","set_hpm20","set_hpm20","set_hpm21","set_hpm21","set_hpm22","set_hpm22","set_hpm23","set_hpm23","set_hpm24","set_hpm24","set_hpm25","set_hpm25","set_hpm26","set_hpm26","set_hpm27","set_hpm27","set_hpm28","set_hpm28","set_hpm29","set_hpm29","set_hpm3","set_hpm3","set_hpm30","set_hpm30","set_hpm31","set_hpm31","set_hpm4","set_hpm4","set_hpm5","set_hpm5","set_hpm6","set_hpm6","set_hpm7","set_hpm7","set_hpm8","set_hpm8","set_hpm9","set_hpm9","set_ir","set_ir","set_tm","set_tm","tm","try_from","try_into","type_id","write","Hedeleg","bits","borrow","borrow_mut","clear_ex0","clear_ex1","clear_ex12","clear_ex13","clear_ex15","clear_ex2","clear_ex3","clear_ex4","clear_ex5","clear_ex6","clear_ex7","clear_ex8","clone","ex0","ex1","ex12","ex13","ex15","ex2","ex3","ex4","ex5","ex6","ex7","ex8","fmt","from","from_bits","into","read","set_ex0","set_ex0","set_ex1","set_ex1","set_ex12","set_ex12","set_ex13","set_ex13","set_ex15","set_ex15","set_ex2","set_ex2","set_ex3","set_ex3","set_ex4","set_ex4","set_ex5","set_ex5","set_ex6","set_ex6","set_ex7","set_ex7","set_ex8","set_ex8","try_from","try_into","type_id","write","Bare","Hgatp","HgatpValues","Sv39x4","Sv48x4","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","fmt","fmt","from","from","from_bits","into","into","mode","ppn","read","set_mode","set_ppn","set_vmid","try_from","try_from","try_into","try_into","type_id","type_id","vmid","write","read","write","read","write","Hideleg","bits","borrow","borrow_mut","clear_eip","clear_sip","clear_tip","clone","eip","fmt","from","from_bits","into","read","set_eip","set_eip","set_sip","set_sip","set_tip","set_tip","sip","tip","try_from","try_into","type_id","write","Hie","bits","borrow","borrow_mut","clear_sgeie","clear_vseie","clear_vssie","clear_vstie","clone","fmt","from","from_bits","into","read","set_sgeie","set_sgeie","set_vseie","set_vseie","set_vssie","set_vssie","set_vstie","set_vstie","sgeie","try_from","try_into","type_id","vseie","vssie","vstie","write","Hip","bits","borrow","borrow_mut","clear_sgeip","clear_vseip","clear_vssip","clear_vstip","clone","fmt","from","from_bits","into","read","set_sgeip","set_sgeip","set_vseip","set_vseip","set_vssip","set_vssip","set_vstip","set_vstip","sgeip","try_from","try_into","type_id","vseip","vssip","vstip","write","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read64","read","read","read64","read","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","read","read64","read","Hstatus","Vsxl128","Vsxl32","Vsxl64","VsxlValues","bits","borrow","borrow","borrow_mut","borrow_mut","clear_gva","clear_hu","clear_spv","clear_spvp","clear_vsbe","clear_vtsr","clear_vtvm","clear_vtw","clone","clone","fmt","fmt","from","from","from_bits","gva","hu","into","into","read","set_gva","set_gva","set_hu","set_hu","set_spv","set_spv","set_spvp","set_spvp","set_vgein","set_vsbe","set_vsbe","set_vsxl","set_vtsr","set_vtsr","set_vtvm","set_vtvm","set_vtw","set_vtw","spv","spvp","try_from","try_from","try_into","try_into","type_id","type_id","vgein","vsbe","vsxl","vtsr","vtvm","vtw","write","read","read64","write","read","write","read","write","read","write","Hvip","bits","borrow","borrow_mut","clear_vseip","clear_vssip","clear_vstip","clone","fmt","from","from_bits","into","read","set_vseip","set_vseip","set_vssip","set_vssip","set_vstip","set_vstip","try_from","try_into","type_id","vseip","vssip","vstip","write","Marchid","bits","borrow","borrow_mut","clone","fmt","from","into","read","try_from","try_into","type_id","Breakpoint","Exception","Exception","IllegalInstruction","InstructionFault","InstructionMisaligned","InstructionPageFault","Interrupt","Interrupt","LoadFault","LoadMisaligned","LoadPageFault","MachineEnvCall","MachineExternal","MachineSoft","MachineTimer","Mcause","StoreFault","StoreMisaligned","StorePageFault","SupervisorEnvCall","SupervisorExternal","SupervisorSoft","SupervisorTimer","Trap","Unknown","Unknown","UserEnvCall","UserExternal","UserSoft","UserTimer","bits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","code","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","is_exception","is_interrupt","ne","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","read","read64","read","Medeleg","bits","borrow","borrow_mut","breakpoint","clear_breakpoint","clear_illegal_instruction","clear_instruction_fault","clear_instruction_misaligned","clear_instruction_page_fault","clear_load_fault","clear_load_misaligned","clear_load_page_fault","clear_machine_env_call","clear_store_fault","clear_store_misaligned","clear_store_page_fault","clear_supervisor_env_call","clear_user_env_call","clone","fmt","from","illegal_instruction","instruction_fault","instruction_misaligned","instruction_page_fault","into","load_fault","load_misaligned","load_page_fault","machine_env_call","read","set_breakpoint","set_illegal_instruction","set_instruction_fault","set_instruction_misaligned","set_instruction_page_fault","set_load_fault","set_load_misaligned","set_load_page_fault","set_machine_env_call","set_store_fault","set_store_misaligned","set_store_page_fault","set_supervisor_env_call","set_user_env_call","store_fault","store_misaligned","store_page_fault","supervisor_env_call","try_from","try_into","type_id","user_env_call","read","write","read","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","read64","write","read","write","read","read64","write","read","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","read64","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","Mideleg","bits","borrow","borrow_mut","clear_sext","clear_ssoft","clear_stimer","clear_uext","clear_usoft","clear_utimer","clone","fmt","from","into","read","set_sext","set_ssoft","set_stimer","set_uext","set_usoft","set_utimer","sext","ssoft","stimer","try_from","try_into","type_id","uext","usoft","utimer","Mie","bits","borrow","borrow_mut","clear_mext","clear_msoft","clear_mtimer","clear_sext","clear_ssoft","clear_stimer","clear_uext","clear_usoft","clear_utimer","clone","fmt","from","into","mext","msoft","mtimer","read","set_mext","set_msoft","set_mtimer","set_sext","set_ssoft","set_stimer","set_uext","set_usoft","set_utimer","sext","ssoft","stimer","try_from","try_into","type_id","uext","usoft","utimer","Mimpid","bits","borrow","borrow_mut","clone","fmt","from","into","read","try_from","try_into","type_id","read","read64","read","Mip","bits","borrow","borrow_mut","clear_msoft","clear_mtimer","clear_sext","clear_ssoft","clear_stimer","clear_uext","clear_usoft","clear_utimer","clone","fmt","from","into","mext","msoft","mtimer","read","set_msoft","set_mtimer","set_sext","set_ssoft","set_stimer","set_uext","set_usoft","set_utimer","sext","ssoft","stimer","try_from","try_into","type_id","uext","usoft","utimer","MXL","Misa","XLEN128","XLEN32","XLEN64","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","fmt","fmt","from","from","has_extension","into","into","mxl","read","try_from","try_from","try_into","try_into","type_id","type_id","read","write","AllOff","Clean","Dirty","FS","Initial","MPP","Machine","Mstatus","NoneDirtyOrClean","NoneDirtySomeClean","Off","SPP","SomeDirty","Supervisor","Supervisor","User","User","XS","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_mie","clear_sie","clear_uie","clone","clone","clone","clone","clone","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","fs","into","into","into","into","into","mie","mpie","mpp","read","sd","set_fs","set_mie","set_mie","set_mpie","set_mpie","set_mpp","set_mpp","set_sie","set_spie","set_spp","set_uie","set_upie","sie","spie","spp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uie","upie","xs","read","Direct","Mtvec","TrapMode","Vectored","address","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","fmt","fmt","from","from","into","into","read","trap_mode","try_from","try_from","try_into","try_into","type_id","type_id","write","Mvendorid","bits","borrow","borrow_mut","clone","fmt","from","into","jedec_manufacturer","read","try_from","try_into","type_id","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","read","write","Bare","Mode","Satp","Sv39","Sv48","Sv57","Sv64","asid","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","fmt","fmt","frame","from","from","into","into","mode","ppn","read","set","try_from","try_from","try_into","try_into","type_id","type_id","write","Breakpoint","Exception","Exception","IllegalInstruction","InstructionFault","InstructionGuestPageFault","InstructionMisaligned","InstructionPageFault","Interrupt","Interrupt","LoadFault","LoadGuestPageFault","LoadPageFault","Scause","StoreFault","StoreGuestPageFault","StoreMisaligned","StorePageFault","SupervisorExternal","SupervisorSoft","SupervisorTimer","Trap","Unknown","Unknown","UserEnvCall","UserExternal","UserSoft","UserTimer","VirtualInstruction","VirtualSupervisorEnvCall","VirtualSupervisorExternal","VirtualSupervisorSoft","VirtualSupervisorTimer","bits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","code","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","is_exception","is_interrupt","ne","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","read","write","Sie","bits","borrow","borrow_mut","clear_sext","clear_ssoft","clear_stimer","clear_uext","clear_usoft","clear_utimer","clone","fmt","from","into","read","set_sext","set_ssoft","set_stimer","set_uext","set_usoft","set_utimer","sext","ssoft","stimer","try_from","try_into","type_id","uext","usoft","utimer","Sip","bits","borrow","borrow_mut","clone","fmt","from","into","read","sext","ssoft","stimer","try_from","try_into","type_id","uext","usoft","utimer","read","write","FS","SPP","Sstatus","Supervisor","User","bits","borrow","borrow","borrow_mut","borrow_mut","clear_mxr","clear_sie","clear_sum","clear_uie","clone","clone","eq","fmt","fmt","from","from","fs","into","into","mxr","read","sd","set_fs","set_mxr","set_sie","set_sie","set_spie","set_spie","set_spp","set_spp","set_sum","set_uie","set_upie","sie","spie","spp","sum","try_from","try_from","try_into","try_into","type_id","type_id","uie","upie","xs","read","Stvec","TrapMode","address","bits","borrow","borrow_mut","clone","fmt","from","into","read","trap_mode","try_from","try_into","type_id","write","read","read64","read","Ucause","bits","borrow","borrow_mut","clone","fmt","from","into","read","try_from","try_into","type_id","read","write","Uie","bits","borrow","borrow_mut","clear_uext","clear_usoft","clear_utimer","clone","fmt","from","into","read","set_uext","set_usoft","set_utimer","try_from","try_into","type_id","uext","usoft","utimer","Uip","bits","borrow","borrow_mut","clone","fmt","from","into","read","try_from","try_into","type_id","uext","usoft","utimer","read","write","Ustatus","borrow","borrow_mut","clear_uie","clone","fmt","from","into","read","set_uie","set_upie","try_from","try_into","type_id","uie","upie","read","TrapMode","Utvec","address","bits","borrow","borrow_mut","clone","fmt","from","into","read","trap_mode","try_from","try_into","type_id","write","Bare","HgatpValues","Sv39x4","Sv48x4","Vsatp","asid","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","fmt","fmt","from","from","from_bits","into","into","mode","ppn","read","set_asid","set_mode","set_ppn","try_from","try_from","try_into","try_into","type_id","type_id","write","Vscause","bits","borrow","borrow_mut","clear_interrupt","clone","code","fmt","from","from_bits","interrupt","into","read","set_code","set_interrupt","set_interrupt","try_from","try_into","type_id","write","read","write","Vsie","bits","borrow","borrow_mut","clear_seie","clear_ssie","clear_stie","clone","fmt","from","from_bits","into","read","seie","set_seie","set_seie","set_ssie","set_ssie","set_stie","set_stie","ssie","stie","try_from","try_into","type_id","write","Vsip","bits","borrow","borrow_mut","clear_seip","clear_ssip","clear_stip","clone","fmt","from","from_bits","into","read","seip","set_seip","set_seip","set_ssip","set_ssip","set_stip","set_stip","ssip","stip","try_from","try_into","type_id","write","read","write","Uxl128","Uxl32","Uxl64","UxlValues","Vsstatus","bits","borrow","borrow","borrow_mut","borrow_mut","clear_mxr","clear_sie","clear_spie","clear_spp","clear_sum","clear_ube","clone","clone","fmt","fmt","from","from","from_bits","fs","into","into","mxr","read","sd","set_fs","set_mxr","set_mxr","set_sd","set_sie","set_sie","set_spie","set_spie","set_spp","set_spp","set_sum","set_sum","set_ube","set_ube","set_uxl","set_xs","sie","spie","spp","sum","try_from","try_from","try_into","try_into","type_id","type_id","ube","uxl","write","xs","read","write","Vstvec","base","bits","borrow","borrow_mut","clone","fmt","from","from_bits","into","mode","read","set_base","set_mode","try_from","try_into","type_id","write"],"q":["riscv","","","","","","","","riscv::addr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::addr::gpax4","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::addr::page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::addr::sv32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::addr::sv39","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::addr::sv48","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::asm","","","","","","","","","","","","","","","","","","","riscv::interrupt","","","","","","","","","","","","","","","","","","","","","","","","riscv::pagingriscv::paging::UnmapError","riscv::registerriscv::register::fcsr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hcounteren","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hedeleg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hgatp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hgeie","","riscv::register::hgeip","","riscv::register::hideleg","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::hpmcounter10","","riscv::register::hpmcounter10h","riscv::register::hpmcounter11","","riscv::register::hpmcounter11h","riscv::register::hpmcounter12","","riscv::register::hpmcounter12h","riscv::register::hpmcounter13","","riscv::register::hpmcounter13h","riscv::register::hpmcounter14","","riscv::register::hpmcounter14h","riscv::register::hpmcounter15","","riscv::register::hpmcounter15h","riscv::register::hpmcounter16","","riscv::register::hpmcounter16h","riscv::register::hpmcounter17","","riscv::register::hpmcounter17h","riscv::register::hpmcounter18","","riscv::register::hpmcounter18h","riscv::register::hpmcounter19","","riscv::register::hpmcounter19h","riscv::register::hpmcounter20","","riscv::register::hpmcounter20h","riscv::register::hpmcounter21","","riscv::register::hpmcounter21h","riscv::register::hpmcounter22","","riscv::register::hpmcounter22h","riscv::register::hpmcounter23","","riscv::register::hpmcounter23h","riscv::register::hpmcounter24","","riscv::register::hpmcounter24h","riscv::register::hpmcounter25","","riscv::register::hpmcounter25h","riscv::register::hpmcounter26","","riscv::register::hpmcounter26h","riscv::register::hpmcounter27","","riscv::register::hpmcounter27h","riscv::register::hpmcounter28","","riscv::register::hpmcounter28h","riscv::register::hpmcounter29","","riscv::register::hpmcounter29h","riscv::register::hpmcounter3","","riscv::register::hpmcounter30","","riscv::register::hpmcounter30h","riscv::register::hpmcounter31","","riscv::register::hpmcounter31h","riscv::register::hpmcounter3h","riscv::register::hpmcounter4","","riscv::register::hpmcounter4h","riscv::register::hpmcounter5","","riscv::register::hpmcounter5h","riscv::register::hpmcounter6","","riscv::register::hpmcounter6h","riscv::register::hpmcounter7","","riscv::register::hpmcounter7h","riscv::register::hpmcounter8","","riscv::register::hpmcounter8h","riscv::register::hpmcounter9","","riscv::register::hpmcounter9h","riscv::register::hstatus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::htimedelta","","","riscv::register::htimedeltah","","riscv::register::htinst","","riscv::register::htval","","riscv::register::hvip","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::marchid","","","","","","","","","","","","riscv::register::mcause","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mcause::Trap","","riscv::register::mcycle","","riscv::register::mcycleh","riscv::register::medeleg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mepc","","riscv::register::mhartid","riscv::register::mhpmcounter10","","","riscv::register::mhpmcounter10h","","riscv::register::mhpmcounter11","","","riscv::register::mhpmcounter11h","","riscv::register::mhpmcounter12","","","riscv::register::mhpmcounter12h","","riscv::register::mhpmcounter13","","","riscv::register::mhpmcounter13h","","riscv::register::mhpmcounter14","","","riscv::register::mhpmcounter14h","","riscv::register::mhpmcounter15","","","riscv::register::mhpmcounter15h","","riscv::register::mhpmcounter16","","","riscv::register::mhpmcounter16h","","riscv::register::mhpmcounter17","","","riscv::register::mhpmcounter17h","","riscv::register::mhpmcounter18","","","riscv::register::mhpmcounter18h","","riscv::register::mhpmcounter19","","","riscv::register::mhpmcounter19h","","riscv::register::mhpmcounter20","","","riscv::register::mhpmcounter20h","","riscv::register::mhpmcounter21","","","riscv::register::mhpmcounter21h","","riscv::register::mhpmcounter22","","","riscv::register::mhpmcounter22h","","riscv::register::mhpmcounter23","","","riscv::register::mhpmcounter23h","","riscv::register::mhpmcounter24","","","riscv::register::mhpmcounter24h","","riscv::register::mhpmcounter25","","","riscv::register::mhpmcounter25h","","riscv::register::mhpmcounter26","","","riscv::register::mhpmcounter26h","","riscv::register::mhpmcounter27","","","riscv::register::mhpmcounter27h","","riscv::register::mhpmcounter28","","","riscv::register::mhpmcounter28h","","riscv::register::mhpmcounter29","","","riscv::register::mhpmcounter29h","","riscv::register::mhpmcounter3","","","riscv::register::mhpmcounter30","","","riscv::register::mhpmcounter30h","","riscv::register::mhpmcounter31","","","riscv::register::mhpmcounter31h","","riscv::register::mhpmcounter3h","","riscv::register::mhpmcounter4","","","riscv::register::mhpmcounter4h","","riscv::register::mhpmcounter5","","","riscv::register::mhpmcounter5h","","riscv::register::mhpmcounter6","","","riscv::register::mhpmcounter6h","","riscv::register::mhpmcounter7","","","riscv::register::mhpmcounter7h","","riscv::register::mhpmcounter8","","","riscv::register::mhpmcounter8h","","riscv::register::mhpmcounter9","","","riscv::register::mhpmcounter9h","","riscv::register::mhpmevent10","","riscv::register::mhpmevent11","","riscv::register::mhpmevent12","","riscv::register::mhpmevent13","","riscv::register::mhpmevent14","","riscv::register::mhpmevent15","","riscv::register::mhpmevent16","","riscv::register::mhpmevent17","","riscv::register::mhpmevent18","","riscv::register::mhpmevent19","","riscv::register::mhpmevent20","","riscv::register::mhpmevent21","","riscv::register::mhpmevent22","","riscv::register::mhpmevent23","","riscv::register::mhpmevent24","","riscv::register::mhpmevent25","","riscv::register::mhpmevent26","","riscv::register::mhpmevent27","","riscv::register::mhpmevent28","","riscv::register::mhpmevent29","","riscv::register::mhpmevent3","","riscv::register::mhpmevent30","","riscv::register::mhpmevent31","","riscv::register::mhpmevent4","","riscv::register::mhpmevent5","","riscv::register::mhpmevent6","","riscv::register::mhpmevent7","","riscv::register::mhpmevent8","","riscv::register::mhpmevent9","","riscv::register::mideleg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mimpid","","","","","","","","","","","","riscv::register::minstret","","riscv::register::minstreth","riscv::register::mip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::misa","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mscratch","","riscv::register::mstatus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mtval","riscv::register::mtvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::mvendorid","","","","","","","","","","","","","riscv::register::pmpaddr0","","riscv::register::pmpaddr1","","riscv::register::pmpaddr10","","riscv::register::pmpaddr11","","riscv::register::pmpaddr12","","riscv::register::pmpaddr13","","riscv::register::pmpaddr14","","riscv::register::pmpaddr15","","riscv::register::pmpaddr2","","riscv::register::pmpaddr3","","riscv::register::pmpaddr4","","riscv::register::pmpaddr5","","riscv::register::pmpaddr6","","riscv::register::pmpaddr7","","riscv::register::pmpaddr8","","riscv::register::pmpaddr9","","riscv::register::pmpcfg0","","riscv::register::pmpcfg1","","riscv::register::pmpcfg2","","riscv::register::pmpcfg3","","riscv::register::satp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::scause","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::scause::Trap","","riscv::register::sepc","","riscv::register::sie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::sip","","","","","","","","","","","","","","","","","","riscv::register::sscratch","","riscv::register::sstatus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::stval","riscv::register::stvec","","","","","","","","","","","","","","","","riscv::register::time","","riscv::register::timeh","riscv::register::ucause","","","","","","","","","","","","riscv::register::uepc","","riscv::register::uie","","","","","","","","","","","","","","","","","","","","","riscv::register::uip","","","","","","","","","","","","","","","riscv::register::uscratch","","riscv::register::ustatus","","","","","","","","","","","","","","","","riscv::register::utval","riscv::register::utvec","","","","","","","","","","","","","","","","riscv::register::vsatp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::vscause","","","","","","","","","","","","","","","","","","","","riscv::register::vsepc","","riscv::register::vsie","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::vsip","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::vsscratch","","riscv::register::vsstatus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riscv::register::vstval","","riscv::register::vstvec","","","","","","","","","","","","","","","","",""],"d":["","Assembly instructions","Interrupts","","RISC-V CSR’s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of bits in this bit field.","A generic trait which provides methods for extracting and …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","<code>EBREAK</code> instruction wrapper","","","","","","","","","","","","","","","","<code>SFENCE.VMA</code> instruction wrapper","<code>SFENCE.VMA</code> instruction wrapper (all address spaces and …","<code>WFI</code> instruction wrapper","Critical section token","A “mutex” based on critical sections","Interrupt number","","","Borrows the data for the duration of the critical section","","","Disables all interrupts","Enables all the interrupts","Execute closure <code>f</code> in an interrupt-free context.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a critical section token","Creates a new mutex","Returns the number associated with an interrupt","","","","","","","","","","","","","","","","","An error indicating that an <code>update_flags</code> call failed.","","An additional frame was needed for the mapping process, …","Polyfill for default use cases.","A trait for types that can allocate a frame of memory.","","A trait for types that can deallocate a frame of memory.","","The page table entry for the given page points to an …","This error is returned from <code>map_to</code> and similar methods.","","","","","","","","","","","","The given page is already mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","","","","","","","","Possible flags for a page table entry.","","","","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","","","","","","","","","","This struct is a two level page table with <code>Mapper</code> trait …","","","","This struct is a three level page table with <code>Mapper</code> trait …","","","","This struct is a four level page table with <code>Mapper</code> trait …","","","An error indicating that an <code>unmap</code> call failed.","","","","","","","Returns the set containing all flags.","Allocate a frame of the appropriate size and return it if …","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Deallocate the given frame of memory.","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Flush the page from the TLB to ensure that the newest …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Maps the given frame to the virtual page with the same …","Maps the given frame to the virtual page with the same …","Don’t flush the TLB and silence the “must be used” …","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Creates a new mapping in the page table.","","","","","Create a new flush promise","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","Get the reference of the specified <code>page</code> entry","","","","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","Toggles the specified flags in-place.","Return the frame that the specified page is mapped to.","Return the frame that the specified page is mapped to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Removes a mapping from the page table and returns the …","","","","Updates the flags of an existing mapping.","Updates the flags of an existing mapping.","Clears all entries.","","Floating-point control and status register","Hypervisor Guest External Interrupt Pending Register.","Hypervisor Exception Delegation Register.","Hypervisor Guest Address Translation and Protection …","Hypervisor Guest External Interrupt Enable Register.","Hypervisor Guest External Interrupt Pending Register.","Hypervisor Interrupt Delegation Register.","Hypervisor Interrupt Enable Register.","Hypervisor Interrupt Pending Register.","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","Performance-monitoring counter","Upper 32 bits of performance-monitoring counter (RV32I …","HStatus Register.","Hypervisor Time Delta Register.","Hypervisor Time Delta Register.","Hypervisor Trap Instruction Register.","Hypervisor Trap Value Register.","Hypervisor Virtual Interrupt Pending Register.","marchid register","mcause register","mcycle register","mcycleh register","medeleg register","mepc register","mhartid register","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring counter","Upper 32 bits of machine performance-monitoring counter …","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","Machine performance-monitoring event selector","mideleg register","mie register","mimpid register","minstret register","minstreth register","mip register","misa register","mscratch register","mstatus register","mtval register","mtvec register","mvendorid register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection address register","Physical memory protection configuration","Physical memory protection configuration, RV32 only","Physical memory protection configuration","Physical memory protection configuration, RV32 only","satp register","scause register","sepc register","sie register","sip register","sscratch register","sstatus register","stval register","stvec register","time register","timeh register","ucause register","uepc register","uie register","uip register","uscratch register","ustatus register","utval register","stvec register","Virtual Supervisor Guest Address Translation and …","Virtual Supervisor Cause Register.","Virtual Supervisor Exception Program Counter.","Virtual Supevisor Interrupt Enable Register.","Virtual Supevisor Interrupt Pending Register.","Virtual Supervisor Scratch Register.","Hypervisor Guest External Interrupt Pending Register.","Virtual Supervisor Trap Value Register.","Virtual Supervisor Trap Vector Base Address Register.","Divide by Zero","Floating-point control and status register","Accrued Exception Flag","Accrued Exception Flags","","Invalid Operation","Inexact","Overflow","","","","","","Rounding Mode","Underflow","Returns the contents of the register as raw bits","","","","","","","","","Resets <code>fflags</code> field bit","Resets <code>fflags</code> field bits","","","","","Divide by Zero","","Accrued Exception Flags","","","","","Rounding Mode","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invalid Operation","Inexact","Overflow","Reads the CSR","Writes the CSR","","","","","","","","","","","","","Underflow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Reads the CSR","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instruction address misaligned","Instruction access fault","Instruction page fault ","Load page fault ","Store/AMO page fault ","Illegal instruction ","Breakpoint ","Load address misaligned ","Load access fault ","Store/AMO address misaligned ","Store/AMO access fault ","Environment call from U-mode or VU-mode ","","Instruction address misaligned","Instruction access fault","Instruction page fault","Load page fault","Store/AMO page fault","Illegal instruction","Breakpoint","Load address misaligned","Load access fault","Store/AMO address misaligned","Store/AMO access fault","Environment call from U-mode or VU-mode","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","Instruction address misaligned","","Instruction access fault","","Instruction page fault ","","Load page fault ","","Store/AMO page fault ","","Illegal instruction ","","Breakpoint ","","Load address misaligned ","","Load access fault ","","Store/AMO address misaligned ","","Store/AMO access fault ","","Environment call from U-mode or VU-mode ","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Guest address translation mode.","Physical Page Number for root page table.","Reads the CSR","","","","","","","","","","Virtual machine ID.","","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","","","","","External Interrupt ","Software Interrupt","Timer Interrupt","","External Interrupt","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","External Interrupt ","","Software Interrupt","","Timer Interrupt","","Software Interrupt","Timer Interrupt","","","","","","","","","Guest External Interrupt ","External Interrupt ","Software Interrupt","Timer Interrupt","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","Guest External Interrupt ","","External Interrupt ","","Software Interrupt","","Timer Interrupt","","Guest External Interrupt","","","","External Interrupt","Software Interrupt","Timer Interrupt","","","","","","Guest External Interrupt ","External Interrupt ","Software Interrupt","Timer Interrupt","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","Guest External Interrupt ","","External Interrupt ","","Software Interrupt","","Timer Interrupt","","Guest External Interrupt","","","","External Interrupt","Software Interrupt","Timer Interrupt","","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","","","","","","","","","","","Guest Virtual Address.","Hypervisor User mode.","Supervisor Previous Virtualization mode.","Supervisor Previous Virtual Privilege.","VS access endianness.","TSR for VM.","TVM for VM.","TW for VM.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Guest Virtual Address.","Hypervisor User mode.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Reads the CSR","Guest Virtual Address.","","Hypervisor User mode.","","Supervisor Previous Virtualization mode.","","Supervisor Previous Virtual Privilege.","","","VS access endianness.","","","TSR for VM.","","TVM for VM.","","TW for VM.","","Supervisor Previous Virtualization mode.","Supervisor Previous Virtual Privilege.","","","","","","","Virtual Guest External Interrupt Number.","VS access endianness.","Effective XLEN for VM.","TSR for VM.","TVM for VM.","TW for VM.","","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","","","","","External Interrupt ","Software Interrupt","Timer Interrupt","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","External Interrupt ","","Software Interrupt","","Timer Interrupt","","","","","External Interrupt","Software Interrupt","Timer Interrupt","","marchid register","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","","","","","Exception","","","","","","Interrupt","","","","","","","","","mcause register","","","","","","","","Trap Cause","","","","","","","Returns the contents of the register as raw bits","","","","","","","","","Trap Cause","","","","","Returns the code field","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is trap cause an exception.","Is trap cause an interrupt.","","Reads the CSR","","","","","","","","","","","","","","","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","medeleg register","Returns the contents of the register as raw bits","","","Breakpoint Delegate","Breakpoint Delegate","Illegal Instruction Delegate","Instruction Access Fault Delegate","Instruction Address Misaligned Delegate","Instruction Page Fault Delegate","Load Access Fault Delegate","Load Address Misaligned Delegate","Load Page Fault Delegate","Environment Call from M-mode Delegate","Store/AMO Access fault","Store/AMO Address Misaligned Delegate","Store/AMO Page Fault Delegate","Environment Call from S-mode Delegate","Environment Call from U-mode Delegate","","","Returns the argument unchanged.","Illegal Instruction Delegate","Instruction Access Fault Delegate","Instruction Address Misaligned Delegate","Instruction Page Fault Delegate","Calls <code>U::from(self)</code>.","Load Access Fault Delegate","Load Address Misaligned Delegate","Load Page Fault Delegate","Environment Call from M-mode Delegate","Reads the CSR","Breakpoint Delegate","Illegal Instruction Delegate","Instruction Access Fault Delegate","Instruction Address Misaligned Delegate","Instruction Page Fault Delegate","Load Access Fault Delegate","Load Address Misaligned Delegate","Load Page Fault Delegate","Environment Call from M-mode Delegate","Store/AMO Access fault","Store/AMO Address Misaligned Delegate","Store/AMO Page Fault Delegate","Environment Call from S-mode Delegate","Environment Call from U-mode Delegate","Store/AMO Access Fault Delegate","Store/AMO Address Misaligned Delegate","Store/AMO Page Fault Delegate","Environment Call from S-mode Delegate","","","","Environment Call from U-mode Delegate","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","mideleg register","Returns the contents of the register as raw bits","","","Supervisor External Interrupt Delegate","Supervisor Software Interrupt Delegate","Supervisor Timer Interrupt Delegate","User External Interrupt Delegate","User Software Interrupt Delegate","User Timer Interrupt Delegate","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","Supervisor External Interrupt Delegate","Supervisor Software Interrupt Delegate","Supervisor Timer Interrupt Delegate","User External Interrupt Delegate","User Software Interrupt Delegate","User Timer Interrupt Delegate","Supervisor External Interrupt Delegate","Supervisor Software Interrupt Delegate","Supervisor Timer Interrupt Delegate","","","","User External Interrupt Delegate","User Software Interrupt Delegate","User Timer Interrupt Delegate","mie register","Returns the contents of the register as raw bits","","","Machine External Interrupt Enable","Machine Software Interrupt Enable","Machine Timer Interrupt Enable","Supervisor External Interrupt Enable","Supervisor Software Interrupt Enable","Supervisor Timer Interrupt Enable","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Machine External Interrupt Enable","Machine Software Interrupt Enable","Machine Timer Interrupt Enable","Reads the CSR","Machine External Interrupt Enable","Machine Software Interrupt Enable","Machine Timer Interrupt Enable","Supervisor External Interrupt Enable","Supervisor Software Interrupt Enable","Supervisor Timer Interrupt Enable","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","Supervisor External Interrupt Enable","Supervisor Software Interrupt Enable","Supervisor Timer Interrupt Enable","","","","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","mimpid register","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","","","","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","mip register","Returns the contents of the register as raw bits","","","Machine Software Interrupt Pending","Machine Timer Interrupt Pending","Supervisor External Interrupt Pending","Supervisor Software Interrupt Pending","Supervisor Timer Interrupt Pending","User External Interrupt Pending","User Software Interrupt Pending","User Timer Interrupt Pending","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Machine External Interrupt Pending","Machine Software Interrupt Pending","Machine Timer Interrupt Pending","Reads the CSR","Machine Software Interrupt Pending","Machine Timer Interrupt Pending","Supervisor External Interrupt Pending","Supervisor Software Interrupt Pending","Supervisor Timer Interrupt Pending","User External Interrupt Pending","User Software Interrupt Pending","User Timer Interrupt Pending","Supervisor External Interrupt Pending","Supervisor Software Interrupt Pending","Supervisor Timer Interrupt Pending","","","","User External Interrupt Pending","User Software Interrupt Pending","User Timer Interrupt Pending","Machine XLEN","misa register","","","","Returns the contents of the register as raw bits","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns true when the atomic extension is implemented.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the machine xlen.","Reads the CSR","","","","","","","Reads the CSR","Writes the CSR","All off","","","Floating-point extension state","","Machine Previous Privilege Mode","","mstatus register","None dirty or clean, some on","None dirty, some clean","","Supervisor Previous Privilege Mode","Some dirty","","","","","Additional extension state","","","","","","","","","","","Machine Interrupt Enable","Supervisor Interrupt Enable","User Interrupt Enable","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Floating-point extension state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Machine Interrupt Enable","Machine Previous Interrupt Enable","Machine Previous Privilege Mode","Reads the CSR","Whether either the FS field or XS field signals the …","Floating-point extension state","Machine Interrupt Enable","","Machine Previous Interrupt Enable","","Machine Previous Privilege Mode","","Supervisor Interrupt Enable","Supervisor Previous Interrupt Enable","Supervisor Previous Privilege Mode","User Interrupt Enable","User Previous Interrupt Enable","Supervisor Interrupt Enable","Supervisor Previous Interrupt Enable","Supervisor Previous Privilege Mode","","","","","","","","","","","","","","","","User Interrupt Enable","User Previous Interrupt Enable","Additional extension state","Reads the CSR","","mtvec register","Trap mode","","Returns the trap-vector base-address","Returns the contents of the register as raw bits","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Reads the CSR","Returns the trap-vector mode","","","","","","","Writes the CSR","mvendorid register","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the JEDEC manufacturer ID","Reads the CSR","","","","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","Reads the CSR","Writes the CSR","","","satp register","","","","","Address space identifier","Returns the contents of the register as raw bits","","","","","","","","","","Physical frame","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Current address-translation scheme","Physical page number","Reads the CSR","","","","","","","","Writes the CSR","","Exception","","","","","","","Interrupt","","","","","scause register","","","","","","","","Trap Cause","","","","","","","","","","","","Returns the contents of the register as raw bits","","","","","","","","","Trap Cause","","","","","Returns the code field","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is trap cause an exception.","Is trap cause an interrupt.","","Reads the CSR","","","","","","","","","","","","","","","Reads the CSR","Writes the CSR","sie register","Returns the contents of the register as raw bits","","","Supervisor External Interrupt Enable","Supervisor Software Interrupt Enable","Supervisor Timer Interrupt Enable","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","Supervisor External Interrupt Enable","Supervisor Software Interrupt Enable","Supervisor Timer Interrupt Enable","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","Supervisor External Interrupt Enable","Supervisor Software Interrupt Enable","Supervisor Timer Interrupt Enable","","","","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","sip register","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","Supervisor External Interrupt Pending","Supervisor Software Interrupt Pending","Supervisor Timer Interrupt Pending","","","","User External Interrupt Pending","User Software Interrupt Pending","User Timer Interrupt Pending","Reads the CSR","Writes the CSR","","Supervisor Previous Privilege Mode","Supervisor Status Register","","","Returns the contents of the register as raw bits","","","","","Make eXecutable Readable","Supervisor Interrupt Enable","Permit Supervisor User Memory access","User Interrupt Enable","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The status of the floating-point unit","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make eXecutable Readable","Reads the CSR","Whether either the FS field or XS field signals the …","The status of the floating-point unit","Make eXecutable Readable","Supervisor Interrupt Enable","","Supervisor Previous Interrupt Enable","","Supervisor Previous Privilege Mode","","Permit Supervisor User Memory access","User Interrupt Enable","User Previous Interrupt Enable","Supervisor Interrupt Enable","Supervisor Previous Interrupt Enable","Supervisor Previous Privilege Mode","Permit Supervisor User Memory access","","","","","","","User Interrupt Enable","User Previous Interrupt Enable","The status of additional user-mode extensions and …","Reads the CSR","stvec register","","Returns the trap-vector base-address","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","Returns the trap-vector mode","","","","Writes the CSR","Reads the CSR","Reads the CSR as a 64-bit value","Reads the CSR","ucause register","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","","","","Reads the CSR","Writes the CSR","uie register","Returns the contents of the register as raw bits","","","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","","","","User External Interrupt Enable","User Software Interrupt Enable","User Timer Interrupt Enable","uip register","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","","","","User External Interrupt Pending","User Software Interrupt Pending","User Timer Interrupt Pending","Reads the CSR","Writes the CSR","ustatus register","","","User Interrupt Enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","User Interrupt Enable","User Previous Interrupt Enable","","","","User Interrupt Enable","User Previous Interrupt Enable","Reads the CSR","","stvec register","Returns the trap-vector base-address","Returns the contents of the register as raw bits","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads the CSR","Returns the trap-vector mode","","","","Writes the CSR","","","","","","ASID.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Guest address translation mode.","Physical Page Number for root page table.","Reads the CSR","","","","","","","","","","","","","","","Is cause interrupt.","","Exception code","","Returns the argument unchanged.","","Is cause interrupt.","Calls <code>U::from(self)</code>.","Reads the CSR","","Is cause interrupt.","","","","","","Reads the CSR","Writes the CSR","","","","","External Interrupt ","Software Interrupt","Timer Interrupt","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","External Interrupt","External Interrupt ","","Software Interrupt","","Timer Interrupt","","Software Interrupt","Timer Interrupt","","","","","","","","","External Interrupt ","Software Interrupt","Timer Interrupt","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Reads the CSR","External Interrupt","External Interrupt ","","Software Interrupt","","Timer Interrupt","","Software Interrupt","Timer Interrupt","","","","","Reads the CSR","Writes the CSR","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Reads the CSR","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Effective User XLEN.","","","Reads the CSR","Writes the CSR","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Reads the CSR","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,120,121,122,23,22,24,0,122,120,121,23,22,24,23,22,24,23,22,22,0,122,122,0,0,0,122,0,0,0,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,5,6,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,123,0,0,0,0,0,0,15,18,15,18,15,18,15,18,15,18,15,18,15,18,15,124,125,126,18,18,18,15,15,15,123,123,18,15,18,15,18,15,18,15,15,18,124,125,126,18,18,18,15,15,15,124,125,126,18,18,18,15,15,15,124,125,18,18,15,15,124,18,15,18,15,123,123,18,15,18,15,18,15,18,15,0,0,26,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,26,27,26,27,26,27,26,27,26,26,26,27,26,27,26,27,26,27,26,27,26,27,26,27,0,0,28,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,28,29,28,29,28,29,28,29,28,28,28,28,29,28,29,28,29,28,29,28,29,28,29,28,29,0,0,30,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,30,31,30,31,30,31,30,31,30,30,30,30,30,31,30,31,30,31,30,31,30,31,30,31,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,32,32,33,32,0,0,0,33,32,33,32,33,32,127,33,32,33,32,33,32,37,37,0,37,0,0,0,0,0,128,0,129,48,0,0,0,0,37,49,0,0,0,0,128,0,0,0,128,0,0,129,48,49,50,0,0,0,0,0,0,0,0,0,0,0,48,49,37,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,128,37,37,44,35,36,37,130,131,37,37,37,37,37,37,37,41,52,53,54,42,43,46,39,48,49,50,35,36,37,41,52,53,54,42,43,46,39,48,49,50,35,36,37,35,36,37,37,37,37,132,133,36,36,37,37,37,37,44,35,36,44,35,36,51,41,42,43,46,39,48,49,50,35,36,37,37,37,37,37,44,35,36,41,52,53,54,42,43,46,39,48,49,50,35,36,37,37,37,37,37,37,128,128,51,41,42,43,46,46,37,37,37,41,52,53,54,42,43,46,39,48,49,50,35,36,37,37,37,44,35,36,128,52,53,54,37,51,41,52,53,54,42,43,37,37,44,35,36,44,35,36,45,57,58,59,60,45,57,58,59,60,128,52,53,54,37,44,35,36,37,44,35,36,37,37,37,45,57,58,59,60,45,57,58,59,60,37,128,128,41,52,53,54,42,43,46,39,48,49,50,35,36,37,41,52,53,54,42,43,46,39,48,49,50,35,36,37,41,52,53,54,42,43,46,39,48,49,50,35,36,37,37,128,52,53,54,128,128,46,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,64,62,62,62,64,64,64,64,64,0,62,61,61,63,62,64,61,63,62,64,0,0,61,63,62,64,63,64,61,61,63,62,64,61,61,63,62,64,61,63,62,64,63,63,63,0,0,61,63,62,64,61,63,62,64,61,63,62,64,63,0,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,65,65,65,65,65,0,66,66,66,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,66,66,66,66,68,0,0,68,68,67,67,68,67,68,67,68,67,68,67,68,67,67,68,67,67,0,67,67,67,67,68,67,68,67,68,67,67,0,0,0,0,0,69,69,69,0,0,0,69,69,69,69,69,69,0,0,69,0,69,0,69,69,69,69,69,69,69,0,70,70,70,0,0,0,0,70,70,70,70,70,0,0,70,0,70,0,70,0,70,70,70,70,70,70,70,70,70,0,71,71,71,0,0,0,0,71,71,71,71,71,0,0,71,0,71,0,71,0,71,71,71,71,71,71,71,71,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,73,73,0,72,72,73,72,73,0,0,0,0,0,0,0,0,72,73,72,73,72,73,72,72,72,72,73,0,0,72,0,72,0,72,0,72,72,0,72,72,0,72,0,72,0,72,72,72,72,73,72,73,72,73,72,72,72,72,72,72,72,0,0,0,0,0,0,0,0,0,0,74,74,74,0,0,0,74,74,74,74,74,0,0,74,0,74,0,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,0,75,75,75,79,0,77,79,79,79,79,0,77,79,79,79,79,78,78,78,0,79,79,79,79,78,78,78,0,78,79,79,78,78,78,76,76,77,78,79,76,77,78,79,76,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,78,79,79,76,77,78,79,76,76,77,0,76,77,78,79,76,77,78,79,76,77,78,79,135,136,0,0,0,0,80,80,80,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,81,81,0,0,0,0,0,0,81,81,81,81,0,0,0,0,0,0,0,81,81,81,81,81,81,81,81,81,0,82,82,82,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,0,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,82,82,0,83,83,83,83,83,83,83,0,83,83,83,0,0,0,0,84,84,84,0,0,0,0,0,0,0,0,84,84,84,84,84,84,84,0,0,0,0,0,0,0,0,0,84,84,84,84,84,84,84,84,84,0,0,86,86,86,85,85,86,85,86,85,86,86,85,86,85,86,85,85,86,85,0,85,86,85,86,85,86,0,0,89,90,90,0,90,0,91,0,89,89,90,0,89,91,92,91,92,0,88,89,90,91,92,88,89,90,91,92,0,0,0,88,89,90,91,92,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,88,89,90,91,92,88,88,88,0,88,0,0,88,0,88,0,88,0,0,0,0,0,88,88,88,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,88,88,0,94,0,0,94,93,93,93,94,93,94,93,94,94,93,94,93,94,93,94,0,93,93,94,93,94,93,94,0,0,95,95,95,95,95,95,95,95,0,95,95,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,97,97,97,97,96,96,96,97,96,97,96,97,97,96,97,96,96,97,96,97,96,96,0,0,96,97,96,97,96,97,0,101,0,99,101,101,101,101,101,0,99,101,101,101,0,101,101,101,101,100,100,100,0,100,101,101,100,100,100,101,101,100,100,100,98,98,99,100,101,98,99,100,101,98,98,99,100,101,98,99,100,101,99,100,101,98,99,100,100,101,101,98,99,100,101,98,98,99,0,98,99,100,101,98,99,100,101,98,99,100,101,137,138,0,0,0,102,102,102,0,0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0,102,102,102,102,102,102,102,102,102,0,103,103,103,103,103,103,103,0,103,103,103,103,103,103,103,103,103,0,0,0,0,0,105,105,104,104,105,104,105,0,0,0,0,104,105,105,104,105,104,105,104,104,105,104,0,104,0,0,0,104,0,104,0,104,0,0,0,104,104,104,104,104,105,104,105,104,105,104,104,104,0,0,0,106,106,106,106,106,106,106,106,0,106,106,106,106,0,0,0,0,0,107,107,107,107,107,107,107,0,107,107,107,0,0,0,108,108,108,0,0,0,108,108,108,108,0,0,0,0,108,108,108,108,108,108,0,109,109,109,109,109,109,109,0,109,109,109,109,109,109,0,0,0,110,110,0,110,110,110,110,0,0,0,110,110,110,110,110,0,0,0,111,111,111,111,111,111,111,111,0,111,111,111,111,0,113,0,113,113,0,112,112,112,113,112,113,112,113,112,113,112,113,112,112,113,112,112,0,112,112,112,112,113,112,113,112,113,112,0,114,114,114,0,114,114,114,114,114,114,114,0,114,0,114,114,114,114,114,0,0,0,115,115,115,0,0,0,115,115,115,115,115,0,115,0,115,0,115,0,115,115,115,115,115,115,115,0,116,116,116,0,0,0,116,116,116,116,116,0,116,0,116,0,116,0,116,116,116,116,116,116,116,0,0,118,118,118,0,0,117,117,118,117,118,0,0,0,0,0,0,117,118,117,118,117,118,117,117,117,118,117,0,117,117,0,117,117,0,117,0,117,0,117,0,117,0,117,117,117,117,117,117,117,117,118,117,118,117,118,117,117,117,117,0,0,0,119,119,119,119,119,119,119,119,119,119,0,119,119,119,119,119,119],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],1],[[],2],[[],3],[[3,3,3,3]],[[3,3,3,3,3]],[[3,3,3]],0,[3],[1],[2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,[[],3],[[],3],0,0,0,[[]],0,0,0,[4],[5],[6],[4,2],[5,2],[6,2],[4,3],[5,3],[6,3],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[5,5],[6,6],[[4,4],7],[[5,5],7],[[6,6],7],[[4,4],8],[[5,5],8],[[6,6],8],[[4,9],10],[[5,9],10],[[6,9],10],[[]],[[]],[[]],[[3,3,3],4],[[3,3,3,3],5],[[3,3,3,3,3],6],[[]],[[]],[[]],[[4,4],8],[[5,5],8],[[6,6],8],[3,4],[3,5],[3,6],[2,4],[2,5],[2,6],[4,3],[5,3],[6,3],[4,3],[5,3],[6,3],[5,3],[6,3],[6,3],[4,3],[5,3],[6,3],[4,3],[5,3],[6,3],[[4,4],[[11,[7]]]],[[5,5],[[11,[7]]]],[[6,6],[[11,[7]]]],[4,4],[5,5],[6,6],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,[[[15,[14]],2]],[[]],[[]],[[]],[[]],[[[18,[[0,[16,17]]]]],[[18,[[0,[16,17]]]]]],[[[15,[[0,[16,14]]]]],[[15,[[0,[16,14]]]]]],[[[18,[[0,[19,17]]]],18],7],[[[15,[[0,[19,14]]]],15],7],[[[18,[[0,[20,17]]]],18],8],[[[15,[[0,[20,14]]]],15],8],[[[18,[[0,[21,17]]]],9],10],[[[15,[[0,[21,14]]]],9],10],[[]],[[]],[[3,3,3,3]],[[3,3,3]],[[3,3]],[[3,3,3,3],[[18,[[0,[22,17]]]]]],[[3,3,3],[[18,[[0,[23,17]]]]]],[[3,3],[[18,[[0,[24,17]]]]]],[[3,3],[[15,[[0,[24,14]]]]]],[[3,3,3,3],[[15,[[0,[22,14]]]]]],[[3,3,3],[[15,[[0,[23,14]]]]]],[3,8],[[]],[[]],[[]],[[[18,[[0,[20,17]]]],18],8],[[[15,[[0,[20,14]]]],15],8],[[[18,[17]]],3],[[[15,[14]]],3],[17,[[18,[17]]]],[14,[[15,[14]]]],[3,[[15,[14]]]],[3,[[18,[17]]]],[[],3],[[],3],[[],3],[[[18,[[0,[24,17]]]]],3],[[[18,[[0,[22,17]]]]],3],[[[18,[[0,[23,17]]]]],3],[[[15,[[0,[23,14]]]]],3],[[[15,[[0,[22,14]]]]],3],[[[15,[[0,[24,14]]]]],3],[[],3],[[],3],[[],3],[[[18,[[0,[23,17]]]]],3],[[[18,[[0,[24,17]]]]],3],[[[18,[[0,[22,17]]]]],3],[[[15,[[0,[24,14]]]]],3],[[[15,[[0,[23,14]]]]],3],[[[15,[[0,[22,14]]]]],3],[[],3],[[],3],[[[18,[[0,[23,17]]]]],3],[[[18,[[0,[22,17]]]]],3],[[[15,[[0,[23,14]]]]],3],[[[15,[[0,[22,14]]]]],3],[[],3],[[[18,[[0,[22,17]]]]],3],[[[15,[[0,[22,14]]]]],3],[[[18,[[0,[25,17]]]],18],[[11,[7]]]],[[[15,[[0,[25,14]]]],15],[[11,[7]]]],[[3,8]],[[]],[[[18,[17]]],17],[[[15,[14]]],14],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,[26],[26,1],[27,2],[26,3],[27,3],[[]],[[]],[[]],[[]],[26,26],[27,27],[[26,26],7],[[27,27],7],[[26,26],8],[[27,27],8],[[26,9],10],[[27,9],10],[[]],[[]],[[3,3,3],26],[[]],[[]],[[26,26],8],[[27,27],8],[3,26],[3,27],[1,26],[2,27],[26,3],[26,3],[26,3],[27,3],[26,3],[27,3],[[26,26],[[11,[7]]]],[[27,27],[[11,[7]]]],[26,26],[27,27],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,[28],[28,2],[29,2],[28,3],[29,3],[[]],[[]],[[]],[[]],[28,28],[29,29],[[28,28],7],[[29,29],7],[[28,28],8],[[29,29],8],[[28,9],10],[[29,9],10],[[]],[[]],[[3,3,3,3],28],[[]],[[]],[[28,28],8],[[29,29],8],[3,28],[3,29],[2,28],[2,29],[28,3],[28,3],[28,3],[28,3],[29,3],[28,3],[29,3],[[28,28],[[11,[7]]]],[[29,29],[[11,[7]]]],[28,28],[29,29],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,[30],[30,2],[31,2],[30,3],[31,3],[[]],[[]],[[]],[[]],[30,30],[31,31],[[30,30],7],[[31,31],7],[[30,30],8],[[31,31],8],[[30,9],10],[[31,9],10],[[]],[[]],[[3,3,3,3,3],30],[[]],[[]],[[30,30],8],[[31,31],8],[3,30],[3,31],[2,30],[2,31],[30,3],[30,3],[30,3],[30,3],[30,3],[31,3],[30,3],[31,3],[[30,30],[[11,[7]]]],[[31,31],[[11,[7]]]],[30,30],[31,31],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[3,3]],[[3,3]],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[]],[[]],0,0,0,[[]],[[]],[[32,33]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],32],[[],34],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],14],[35,14],[36,14],[[],37],[[],[[11,[15]]]],[[],[[11,[38]]]],[[37,37],37],[[37,37]],[[37,37],37],[[37,37]],[37,3],[[37,37],37],[[37,37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[36,36],[37,37],[[37,37],7],[37,37],[[37,37],8],[15],[38],[36,[[39,[29]]]],[36,[[39,[31]]]],[[37,37],37],[[],37],[[37,37],8],[[37,40]],[[],37],[35,37],[36,37],[[],37],[35,37],[36,37],[[]],[41],[42],[43],[[[46,[[45,[[0,[44,21]]]],[0,[44,21]]]],9],[[12,[47]]]],[[[39,[14]],9],[[12,[47]]]],[[48,9],10],[[[49,[[0,[21,14]]]],9],10],[[50,9],10],[[35,9],[[12,[47]]]],[[36,9],[[12,[47]]]],[[37,9],10],[[37,9],10],[[37,9],10],[[37,9],10],[[37,9],10],[[],[[15,[14]]]],[35,[[15,[14]]]],[36,[[15,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[11,[37]]]],[3,37],[3,37],[40,37],[37],[[15,37],[[12,[48]]]],[[15,37],[[12,[48]]]],[[]],[41],[42],[43],[[[46,[[45,[44]],44]],3]],[[[46,[[45,[44]],44]],3]],[[37,37]],[[37,37],37],[[37,37],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,8],[37,8],[[],8],[35,8],[36,8],[[18,15,37],[[12,[48]]]],[[[52,[[0,[17,24]],51]],37],[[12,[48]]]],[[[53,[[0,[17,23]],51]],37],[[12,[48]]]],[[[54,[[0,[17,22]],51]],37],[[12,[48]]]],[[37,37],8],[[[18,[17]]]],[[[18,[17]]],41],[[55,3],[[52,[[0,[17,24]],51]]]],[[56,3],[[53,[[0,[17,23]],51]]]],[[56,3],[[54,[[0,[17,22]],51]]]],[[[18,[17]]],42],[[[18,[17]]],43],[37,37],[[37,37],[[11,[7]]]],[[],3],[35,3],[36,3],[[],2],[35,2],[36,2],[3],[[57,3],35],[[58,3],36],[[59,3],35],[[60,3],36],[3],[[57,3],35],[[58,3],36],[[59,3],35],[[60,3],36],[18,[[12,[50]]]],[[[52,[[0,[17,24]],51]]],[[12,[35,50]]]],[[[53,[[0,[17,23]],51]]],[[12,[36,50]]]],[[[54,[[0,[17,22]],51]]],[[12,[36,50]]]],[[37,37]],[[[15,[14]],37]],[[35,[15,[14]],37]],[[36,[15,[14]],37]],[[37,37,8]],[[]],[35],[36],[[37,37],37],[[37,37]],[[37,37],37],[[]],[57],[58],[59],[60],[[]],[57],[58],[59],[60],[[37,37]],[18,[[11,[15]]]],[18,[[11,[15]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[37,37],37],[18,[[12,[49]]]],[[[52,[[0,[17,24]],51]]],[[12,[49]]]],[[[53,[[0,[17,23]],51]]],[[12,[49]]]],[[[54,[[0,[17,22]],51]]],[[12,[49]]]],[[18,37],[[12,[50]]]],[[18,37],[[12,[50]]]],[[[46,[[45,[44]],44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[61,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62],[[]],[61,61],[63,63],[62,62],[64,64],[63,8],[[64,64],8],[61,63],[[61,9],10],[[63,9],10],[[62,9],10],[[64,9],10],[61,64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,8],[63,8],[63,8],[[],61],[64],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[63,8],0,[65,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,65],[65,8],[[65,9],10],[[]],[3,65],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[65,8],[[]],[65,8],[[],65],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[[]],[[65,8]],[65,8],[[],12],[[],12],[[],13],[65],0,[66,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[66,8],[[66,9],10],[[]],[3,66],[[]],[[],66],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[]],[[66,8]],[[],12],[[],12],[[],13],[66],0,0,0,0,0,[67,3],[[]],[[]],[[]],[[]],[67,67],[68,68],[[67,9],10],[[68,9],10],[[]],[[]],[3,67],[[]],[[]],[67,68],[67,3],[[],67],[[67,68]],[[67,3]],[[67,3]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[67,3],[67],[[],3],[3],[[],3],[3],0,[69,3],[[]],[[]],[[]],[[]],[[]],[69,69],[69,8],[[69,9],10],[[]],[3,69],[[]],[[],69],[[]],[[69,8]],[[]],[[69,8]],[[]],[[69,8]],[69,8],[69,8],[[],12],[[],12],[[],13],[69],0,[70,3],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[[70,9],10],[[]],[3,70],[[]],[[],70],[[]],[[70,8]],[[]],[[70,8]],[[]],[[70,8]],[[]],[[70,8]],[70,8],[[],12],[[],12],[[],13],[70,8],[70,8],[70,8],[70],0,[71,3],[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[[71,9],10],[[]],[3,71],[[]],[[],71],[[]],[[71,8]],[[]],[[71,8]],[[]],[[71,8]],[[]],[[71,8]],[71,8],[[],12],[[],12],[[],13],[71,8],[71,8],[71,8],[71],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],[[],3],[[],2],[[],3],0,0,0,0,0,[72,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,72],[73,73],[[72,9],10],[[73,9],10],[[]],[[]],[3,72],[72,8],[72,8],[[]],[[]],[[],72],[[]],[[72,8]],[[]],[[72,8]],[[]],[[72,8]],[[]],[[72,8]],[[72,3]],[[]],[[72,8]],[[72,73]],[[]],[[72,8]],[[]],[[72,8]],[[]],[[72,8]],[72,8],[72,8],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[72,3],[72,8],[72,73],[72,8],[72,8],[72,8],[72],[[],3],[[],2],[3],[[],3],[3],[[],3],[3],[[],3],[3],0,[74,3],[[]],[[]],[[]],[[]],[[]],[74,74],[[74,9],10],[[]],[3,74],[[]],[[],74],[[]],[[74,8]],[[]],[[74,8]],[[]],[[74,8]],[[],12],[[],12],[[],13],[74,8],[74,8],[74,8],[74],0,[75,3],[[]],[[]],[75,75],[[75,9],10],[[]],[[]],[[],[[11,[75]]]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[76,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,77],[76,76],[77,77],[78,78],[79,79],[76,3],[[77,77],8],[[78,78],8],[[79,79],8],[[76,9],10],[[77,9],10],[[78,9],10],[[79,9],10],[[]],[[]],[3,78],[[]],[3,79],[[]],[[]],[[]],[[]],[[]],[76,8],[76,8],[[77,77],8],[[],76],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[],3],[[],2],[[],3],0,[80,3],[[]],[[]],[80,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80,80],[[80,9],10],[[]],[80,8],[80,8],[80,8],[80,8],[[]],[80,8],[80,8],[80,8],[80,8],[[],80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80,8],[80,8],[80,8],[80,8],[[],12],[[],12],[[],13],[80,8],[[],3],[3],[[],3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[[],2],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],0,[81,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,81],[[81,9],10],[[]],[[]],[[],81],[[]],[[]],[[]],[[]],[[]],[[]],[81,8],[81,8],[81,8],[[],12],[[],12],[[],13],[81,8],[81,8],[81,8],0,[82,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,82],[[82,9],10],[[]],[[]],[82,8],[82,8],[82,8],[[],82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,8],[82,8],[82,8],[[],12],[[],12],[[],13],[82,8],[82,8],[82,8],0,[83,3],[[]],[[]],[83,83],[[83,9],10],[[]],[[]],[[],[[11,[83]]]],[[],12],[[],12],[[],13],[[],3],[[],2],[[],3],0,[84,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,84],[[84,9],10],[[]],[[]],[84,8],[84,8],[84,8],[[],84],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,8],[84,8],[84,8],[[],12],[[],12],[[],13],[84,8],[84,8],[84,8],0,0,0,0,0,[85,3],[[]],[[]],[[]],[[]],[85,85],[86,86],[[86,86],8],[[85,9],10],[[86,9],10],[[]],[[]],[[85,87],8],[[]],[[]],[85,86],[[],[[11,[85]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],3],[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88,88],[89,89],[90,90],[91,91],[92,92],[[89,89],8],[[90,90],8],[[91,91],8],[[92,92],8],[[88,9],10],[[89,9],10],[[90,9],10],[[91,9],10],[[92,9],10],[[]],[[]],[[]],[[]],[[]],[88,90],[[]],[[]],[[]],[[]],[[]],[88,8],[88,8],[88,91],[[],88],[88,8],[90],[[]],[[88,8]],[[]],[[88,8]],[91],[[88,91]],[[]],[[]],[92],[[]],[[]],[88,8],[88,8],[88,92],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[88,8],[88,8],[88,89],[[],3],0,0,0,0,[93,3],[93,3],[[]],[[]],[[]],[[]],[93,93],[94,94],[[94,94],8],[[93,9],10],[[94,9],10],[[]],[[]],[[]],[[]],[[],93],[93,[[11,[94]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[3,94]],0,[95,3],[[]],[[]],[95,95],[[95,9],10],[[]],[[]],[95,3],[[],[[11,[95]]]],[[],12],[[],12],[[],13],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],[[],3],[3],0,0,0,0,0,0,0,[96,3],[96,3],[[]],[[]],[[]],[[]],[96,96],[97,97],[[97,97],8],[[96,9],10],[[97,9],10],[96,38],[[]],[[]],[[]],[[]],[96,97],[96,3],[[],96],[[97,3,3]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[98,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[98,99],[98,98],[99,99],[100,100],[101,101],[98,3],[[99,99],8],[[100,100],8],[[101,101],8],[[99,9],10],[[100,9],10],[[101,9],10],[[]],[[]],[[]],[3,100],[[]],[3,101],[[]],[[]],[[]],[[]],[98,8],[98,8],[[99,99],8],[[],98],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[],3],[3],0,[102,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,102],[[102,9],10],[[]],[[]],[[],102],[[]],[[]],[[]],[[]],[[]],[[]],[102,8],[102,8],[102,8],[[],12],[[],12],[[],13],[102,8],[102,8],[102,8],0,[103,3],[[]],[[]],[103,103],[[103,9],10],[[]],[[]],[[],103],[103,8],[103,8],[103,8],[[],12],[[],12],[[],13],[103,8],[103,8],[103,8],[[],3],[3],0,0,0,0,0,[104,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104,104],[105,105],[[105,105],8],[[104,9],10],[[105,9],10],[[]],[[]],[104,90],[[]],[[]],[104,8],[[],104],[104,8],[90],[[]],[[]],[[104,8]],[[]],[[104,8]],[105],[[104,105]],[[]],[[]],[[]],[104,8],[104,8],[104,105],[104,8],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[104,8],[104,8],[104,90],[[],3],0,0,[106,3],[106,3],[[]],[[]],[106,106],[[106,9],10],[[]],[[]],[[],106],[106,[[11,[94]]]],[[],12],[[],12],[[],13],[[3,94]],[[],3],[[],2],[[],3],0,[107,3],[[]],[[]],[107,107],[[107,9],10],[[]],[[]],[[],107],[[],12],[[],12],[[],13],[[],3],[3],0,[108,3],[[]],[[]],[[]],[[]],[[]],[108,108],[[108,9],10],[[]],[[]],[[],108],[[]],[[]],[[]],[[],12],[[],12],[[],13],[108,8],[108,8],[108,8],0,[109,3],[[]],[[]],[109,109],[[109,9],10],[[]],[[]],[[],109],[[],12],[[],12],[[],13],[109,8],[109,8],[109,8],[[],3],[3],0,[[]],[[]],[[]],[110,110],[[110,9],10],[[]],[[]],[[],110],[[]],[[]],[[],12],[[],12],[[],13],[110,8],[110,8],[[],3],0,0,[111,3],[111,3],[[]],[[]],[111,111],[[111,9],10],[[]],[[]],[[],111],[111,[[11,[94]]]],[[],12],[[],12],[[],13],[[3,94]],0,0,0,0,0,[112,3],[112,3],[[]],[[]],[[]],[[]],[112,112],[113,113],[[112,9],10],[[113,9],10],[[]],[[]],[3,112],[[]],[[]],[112,113],[112,3],[[],112],[[112,3]],[[112,113]],[[112,3]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[112],0,[114,3],[[]],[[]],[[]],[114,114],[114,3],[[114,9],10],[[]],[3,114],[114,8],[[]],[[],114],[[114,3]],[[]],[[114,8]],[[],12],[[],12],[[],13],[114],[[],3],[3],0,[115,3],[[]],[[]],[[]],[[]],[[]],[115,115],[[115,9],10],[[]],[3,115],[[]],[[],115],[115,8],[[]],[[115,8]],[[]],[[115,8]],[[]],[[115,8]],[115,8],[115,8],[[],12],[[],12],[[],13],[115],0,[116,3],[[]],[[]],[[]],[[]],[[]],[116,116],[[116,9],10],[[]],[3,116],[[]],[[],116],[116,8],[[]],[[116,8]],[[]],[[116,8]],[[]],[[116,8]],[116,8],[116,8],[[],12],[[],12],[[],13],[116],[[],3],[3],0,0,0,0,0,[117,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[117,117],[118,118],[[117,9],10],[[118,9],10],[[]],[[]],[3,117],[117,3],[[]],[[]],[117,8],[[],117],[117,3],[[117,3]],[[]],[[117,8]],[[117,3]],[[]],[[117,8]],[[]],[[117,8]],[[]],[[117,8]],[[]],[[117,8]],[[]],[[117,8]],[[117,118]],[[117,3]],[117,8],[117,8],[117,8],[117,8],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[117,8],[117,118],[117],[117,3],[[],3],[3],0,[119,3],[119,3],[[]],[[]],[119,119],[[119,9],10],[[]],[3,119],[[]],[119,3],[[],119],[[119,3]],[[119,3]],[[],12],[[],12],[[],13],[119]],"p":[[15,"u32"],[15,"u64"],[15,"usize"],[3,"GPAddrSv32X4"],[3,"GPAddrSv39X4"],[3,"GPAddrSv48X4"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"PhysicalAddress"],[3,"FrameWith"],[8,"Clone"],[8,"VirtualAddress"],[3,"PageWith"],[8,"Ord"],[8,"PartialEq"],[8,"Debug"],[8,"AddressL4"],[8,"AddressL3"],[8,"AddressL2"],[8,"PartialOrd"],[3,"VirtAddrSv32"],[3,"PhysAddrSv32"],[3,"VirtAddrSv39"],[3,"PhysAddrSv39"],[3,"VirtAddrSv48"],[3,"PhysAddrSv48"],[3,"Mutex"],[3,"CriticalSection"],[15,"u8"],[3,"PageTableEntryX32"],[3,"PageTableEntryX64"],[3,"PageTableFlags"],[6,"Frame"],[3,"PageTableEntryX64Printer"],[8,"IntoIterator"],[3,"MapperFlush"],[3,"MapperFlushGPA"],[3,"MapperFlushGPT"],[8,"PTE"],[8,"PTEIterableSlice"],[3,"PageTableWith"],[3,"Error"],[4,"MapToError"],[4,"UnmapError"],[4,"FlagUpdateError"],[8,"MapperFlushable"],[3,"Rv32PageTableWith"],[3,"Rv39PageTableWith"],[3,"Rv48PageTableWith"],[6,"PageTableX32"],[6,"PageTableX64"],[6,"Entries32"],[6,"Entries64"],[6,"Entries32X4"],[6,"Entries64X4"],[3,"FCSR"],[4,"Flag"],[3,"Flags"],[4,"RoundingMode"],[3,"Hcounteren"],[3,"Hedeleg"],[3,"Hgatp"],[4,"HgatpValues"],[3,"Hideleg"],[3,"Hie"],[3,"Hip"],[3,"Hstatus"],[4,"VsxlValues"],[3,"Hvip"],[3,"Marchid"],[3,"Mcause"],[4,"Trap"],[4,"Interrupt"],[4,"Exception"],[3,"Medeleg"],[3,"Mideleg"],[3,"Mie"],[3,"Mimpid"],[3,"Mip"],[3,"Misa"],[4,"MXL"],[15,"char"],[3,"Mstatus"],[4,"XS"],[4,"FS"],[4,"MPP"],[4,"SPP"],[3,"Mtvec"],[4,"TrapMode"],[3,"Mvendorid"],[3,"Satp"],[4,"Mode"],[3,"Scause"],[4,"Trap"],[4,"Interrupt"],[4,"Exception"],[3,"Sie"],[3,"Sip"],[3,"Sstatus"],[4,"SPP"],[3,"Stvec"],[3,"Ucause"],[3,"Uie"],[3,"Uip"],[3,"Ustatus"],[3,"Utvec"],[3,"Vsatp"],[4,"HgatpValues"],[3,"Vscause"],[3,"Vsie"],[3,"Vsip"],[3,"Vsstatus"],[4,"UxlValues"],[3,"Vstvec"],[8,"AddressX32"],[8,"AddressX64"],[8,"Address"],[8,"BitField"],[8,"PageWithL4"],[8,"PageWithL3"],[8,"PageWithL2"],[8,"Nr"],[8,"Mapper"],[8,"MapperExt"],[8,"FrameAllocatorFor"],[8,"FrameAllocator"],[8,"FrameDeallocatorFor"],[8,"FrameDeallocator"],[13,"InvalidFrameAddress"],[13,"Interrupt"],[13,"Exception"],[13,"Interrupt"],[13,"Exception"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":[2,2,2,2,2,2,2,2,2,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Barrier","Lazy","Mutex","MutexGuard","Once","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","barrier","lazy","mutex","once","rw_lock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","TicketMutex","TicketMutexGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","leak","leak","leak","lock","lock","lock","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","type_id","type_id","type_id","type_id","type_id","type_id","INIT","Once","borrow","borrow_mut","call_once","drop","fmt","from","from","from","get","get_mut","initialized","into","is_completed","new","poll","try_from","try_into","try_into_inner","type_id","wait","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","leak","leak","leak","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_read","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","upgrade","upgradeable_read","write","writer_count"],"q":["spin","","","","","","","","","","","","","","spin::barrier","","","","","","","","","","","","","","","","","","","spin::lazy","","","","","","","","","","","","","spin::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::once","","","","","","","","","","","","","","","","","","","","","","spin::rw_lock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","","","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","A spin-based ticket lock providing mutually exclusive …","A guard that protects some data.","","","","","","","","","","","","","","","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","","","","","","","","Force unlock this <code>SpinMutex</code>.","Force unlock this <code>TicketMutex</code>, by serving the next ticket.","Force unlock this <code>Mutex</code>.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Consumes this <code>TicketMutex</code> and unwraps the underlying data.","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","Returns <code>true</code> if the lock is currently held.","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>SpinMutex</code> and returns a guard that permits …","Locks the <code>TicketMutex</code> and returns a guard that permits …","Locks the <code>Mutex</code> and returns a guard that permits access to …","Creates a new <code>SpinMutex</code> wrapping the supplied data.","Creates a new <code>TicketMutex</code> wrapping the supplied data.","Creates a new <code>Mutex</code> wrapping the supplied data.","","","","","","","","","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","Try to lock this <code>TicketMutex</code>, returning a lock guard if …","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","","","Performs an initialization routine once and only once. The …","","","Returns the argument unchanged.","","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Returns a reference to the inner value if the <code>Once</code> has …","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","Attempt to acquire this lock with shared read access.","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,4,1,4,1,4,1,1,4,4,1,4,1,4,1,4,0,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,14,17,15,18,16,19,14,17,15,18,16,19,14,15,16,17,18,19,17,18,19,17,18,14,17,17,15,18,18,16,19,19,14,15,16,14,14,14,17,15,15,15,18,16,16,16,19,14,15,16,14,17,15,18,16,19,14,15,16,14,15,16,17,18,19,14,15,16,14,15,16,14,17,15,18,16,19,14,17,15,18,16,19,14,15,16,14,17,15,18,16,19,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,24,25,26,27,24,25,26,27,24,25,26,27,26,26,27,26,25,26,27,24,25,25,26,26,27,27,24,24,24,24,24,25,26,27,24,24,25,26,27,24,25,26,27,24,24,24,24,25,26,27,24,25,26,27,24,27,24,24,24,25,26,27,27,24,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,4],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[4,1],0,[[]],[[]],[[],[[8,[7]]]],[[[8,[9]]]],[[[8,[10]],11],12],[8],[[]],[[]],[[],8],[[],5],[[],5],[[],6],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[14,[[0,[13,7]]]]]],[[],[[15,[[0,[13,7]]]]]],[[],[[16,[[0,[13,7]]]]]],[[[17,[13]]]],[[[18,[13]]]],[[[19,[13]]]],[[[17,[13]]]],[[[18,[13]]]],[[[19,[13]]]],[[[17,[13]]]],[[[18,[13]]]],[[[14,[[0,[13,10]]]],11],12],[[[17,[[0,[13,10]]]],11],12],[[[17,[[0,[13,20]]]],11],12],[[[15,[[0,[13,10]]]],11],12],[[[18,[[0,[13,20]]]],11],12],[[[18,[[0,[13,10]]]],11],12],[[[16,[[0,[13,10]]]],11],12],[[[19,[[0,[13,10]]]],11],12],[[[19,[[0,[13,20]]]],11],12],[[[14,[13]]]],[[[15,[13]]]],[[[16,[13]]]],[[]],[21],[[],14],[[]],[[],15],[21],[[]],[[]],[21],[[]],[[],16],[[]],[[[14,[13]]]],[[[15,[13]]]],[[[16,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[15],[16],[[[14,[13]]],2],[[[15,[13]]],2],[[[16,[13]]],2],[[[17,[13]]]],[[[18,[13]]]],[[[19,[13]]]],[[[14,[13]]],[[17,[13]]]],[[[15,[13]]],[[18,[13]]]],[[[16,[13]]],[[19,[13]]]],[[],14],[[],15],[[],16],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[14,[13]]],[[22,[[17,[13]]]]]],[[[15,[13]]],[[22,[[18,[13]]]]]],[[[16,[13]]],[[22,[[19,[13]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,[[]],[[]],[[23,9]],[23],[[[23,[10]],11],12],[[]],[[],23],[21],[23,22],[23,22],[[],23],[[]],[23,2],[[],23],[23,22],[[],5],[[],5],[23,22],[[],6],[23],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[24,[[0,[13,7]]]]]],[[[25,[13]]]],[[[26,[13]]]],[[[27,[13]]]],[[[26,[13]]]],[[[26,[13]]],[[25,[13]]]],[[[27,[13]]],[[25,[13]]]],[[[26,[13]]],[[27,[13]]]],[[[25,[13]]]],[[[26,[13]]]],[[[27,[13]]]],[[[24,[[0,[13,10]]]],11],12],[[[25,[[0,[13,10]]]],11],12],[[[25,[[0,[13,20]]]],11],12],[[[26,[[0,[13,10]]]],11],12],[[[26,[[0,[13,20]]]],11],12],[[[27,[[0,[13,10]]]],11],12],[[[27,[[0,[13,20]]]],11],12],[[[24,[13]]]],[[[24,[13]]]],[21],[[]],[[],24],[[]],[[]],[[]],[[[24,[13]]]],[[]],[[]],[[]],[[]],[24],[[[25,[13]]]],[[[26,[13]]]],[[[27,[13]]]],[[],24],[[[24,[13]]],[[25,[13]]]],[[[24,[13]]],3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[24,[13]]],[[22,[[25,[13]]]]]],[[[27,[13]]],[[5,[[26,[13]],[27,[13]]]]]],[[[24,[13]]],[[22,[[27,[13]]]]]],[[[24,[13]]],[[22,[[26,[13]]]]]],[[],6],[[],6],[[],6],[[],6],[[[27,[13]]],[[26,[13]]]],[[[24,[13]]],[[27,[13]]]],[[[24,[13]]],[[26,[13]]]],[[[24,[13]]],3]],"p":[[3,"BarrierWaitResult"],[15,"bool"],[15,"usize"],[3,"Barrier"],[4,"Result"],[3,"TypeId"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"SpinMutex"],[3,"TicketMutex"],[3,"Mutex"],[3,"SpinMutexGuard"],[3,"TicketMutexGuard"],[3,"MutexGuard"],[8,"Display"],[15,"never"],[4,"Option"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"]]},\
"virtio_drivers":{"doc":"VirtIO guest drivers.","t":[13,13,3,13,13,13,13,4,13,13,4,13,13,8,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,4,6,13,13,13,13,13,13,13,6,3,3,3,3,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11],"n":["AbsInfo","AlreadyUsed","BlkResp","Block","BufferTooSmall","Console","Crypto","DeviceType","DmaError","EntropySource","Error","EvBits","GPU","Hal","IOMMU","IdDevids","IdName","IdSerial","Input","InputConfigSelect","InputEvent","Invalid","InvalidParam","IoErr","IoError","IoMemory","Mac80211","Memory","MemoryBalloon","MemoryBallooning","Network","NotReady","Ok","PhysAddr","PropBits","Pstore","RespStatus","Result","Rpmsg","RprocSerial","ScsiHost","SignalDistributionModule","Socket","Timer","Unsupported","VirtAddr","VirtIOBlk","VirtIOConsole","VirtIOGpu","VirtIOHeader","VirtIOInput","VirtIONet","VirtioCAIF","_9P","_NotReady","ack_interrupt","ack_interrupt","ack_interrupt","ack_interrupt","ack_interrupt","ack_interrupt","begin_init","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_recv","can_send","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","config_space","default","default","device_type","dma_alloc","dma_dealloc","eq","eq","eq","event_type","finish_init","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","mac","max_queue_size","move_cursor","new","new","new","new","new","notify","phys_to_virt","pop_pending_event","pop_used","query_config_select","queue_physical_page_number","queue_set","queue_used","read_block","read_block_nb","recv","recv","resolution","send","send","setup_cursor","setup_framebuffer","status","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vendor_id","verify","virt_queue_size","virt_to_phys","write_block","write_block_nb"],"q":["virtio_driversd":["subsel specifies the absolute axis using ABS_* constants …","The queue is already in use.","Response of a VirtIOBlk request.","","The buffer is too small.","","","Types of virtio devices.","Failed to alloc DMA memory.","","The error type of VirtIO drivers.","subsel specifies the event type using EV_* constants in …","","The interface which a particular hardware implementation …","","Returns ID information of the device, in u.ids. subsel is …","Returns the name of the device, in u.string. subsel is …","Returns the serial number of the device, in u.string. …","","Select value used for <code>VirtIOInput::query_config_select()</code>.","Both queues use the same <code>virtio_input_event</code> struct. <code>type</code>, …","","Invalid parameter.","IoErr.","I/O Error","","","","","","","The device is not ready.","Ok.","A physical address as used for virtio.","Returns input properties of the device, in u.bitmap. …","","Status of a VirtIOBlk request.","The type returned by driver methods.","","","","","","","Unsupported yet.","A virtual memory address in the address space of the …","The virtio block device is a simple virtual block device …","Virtio console. Only one single port is allowed since ``…","A virtio based graphics adapter.","MMIO Device Legacy Register Interface.","Virtual human interface devices such as keyboards, mice …","The virtio network device is a virtual ethernet card.","","","Not ready.","Acknowledge interrupt.","Acknowledge interrupt.","Acknowledge interrupt.","Acknowledge interrupt and return true if success.","Acknowledge interrupt and process events.","Acknowledge interrupt.","Begin initializing the device.","","","","","","","","","","","","","","","","","","","","","","","","","Whether can receive packet.","Whether can send packet.","","","","","","","","","Event code.","Get the pointer to config space (at offset 0x100)","","","Get the device type.","Allocates the given number of contiguous physical pages of …","Deallocates the given contiguous physical DMA memory pages.","","","","Event type.","Finish initializing the device.","Flush framebuffer to screen.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get MAC address.","Get the max size of queue.","Move the pointer without updating the shape.","Create a new VirtIO-Blk driver.","Create a new VirtIO-Console driver.","Create a new VirtIO-Gpu driver.","Create a new VirtIO-Input driver.","Create a new VirtIO-Net driver.","Notify device.","Converts a physical address used for virtio to a virtual …","Pop the pending event.","During an interrupt, it fetches a token of a completed …","Query a specific piece of information by <code>select</code> and <code>subsel</code>…","Get guest physical page number of the virtual queue.","Set queue.","Whether the queue is in used.","Read a block.","Read a block in a non-blocking way which means that it …","Try get char.","Receive a packet.","Get the resolution (width, height).","Put a char onto the device.","Send a packet.","Set the pointer shape and position.","Setup framebuffer","Return the status of a VirtIOBlk request.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Event value.","Get the vendor ID.","Verify a valid header.","Return size of its VirtQueue. It can be used to tell the …","Converts a virtual address which the program can access to …","Write a block.","Arguments"],"i":[12,14,0,17,14,17,17,0,14,17,0,12,17,0,17,12,12,12,17,0,0,17,14,11,14,17,17,17,17,17,17,14,11,0,12,17,0,0,17,17,17,17,17,17,11,0,0,0,0,0,0,0,17,17,11,2,4,6,7,8,9,7,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,9,9,11,12,13,14,11,12,13,14,13,7,16,13,7,1,1,11,17,14,13,7,6,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,9,7,6,2,4,6,8,9,7,1,8,2,8,7,7,7,2,2,4,9,6,4,9,6,6,16,11,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,13,7,7,2,1,2,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],3],[[[4,[1]]],[[5,[3]]]],[[[6,[1]]],3],[7,3],[[[8,[1]]],3],[[[9,[1]]],3],[[7,10]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[1]]],3],[[[9,[1]]],3],[11,11],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[]],0,[7,15],[[],16],[[],13],[7,17],[18,19],[[19,18],20],[[11,11],3],[[17,17],3],[[14,14],3],0,[7],[[[6,[1]]],5],[[16,21],22],[[11,21],22],[[17,21],22],[[12,21],22],[[13,21],22],[[14,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[1]]]],[7,23],[[[6,[1]],23,23],5],[7,[[5,[[2,[1]]]]]],[7,[[5,[[4,[1]]]]]],[7,[[5,[[6,[1]]]]]],[7,[[5,[[8,[1]]]]]],[7,[[5,[[9,[1]]]]]],[[7,23]],[19,24],[[[8,[1]]],[[25,[13]]]],[[[2,[1]]],[[5,[26]]]],[[[8,[1]],12,27],27],[[7,23],23],[[7,23,23,23,23]],[[7,23],3],[[[2,[1]],18],5],[[[2,[1]],18,16],[[5,[26]]]],[[[4,[1]],3],[[5,[[25,[27]]]]]],[[[9,[1]]],[[5,[18]]]],[[[6,[1]]]],[[[4,[1]],27],5],[[[9,[1]]],5],[[[6,[1]],23,23,23,23],5],[[[6,[1]]],5],[16,11],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,[7,23],[7,3],[[[2,[1]]],26],[24,19],[[[2,[1]],18],5],[[[2,[1]],18,16],[[5,[26]]]]],"p":[[8,"Hal"],[3,"VirtIOBlk"],[15,"bool"],[3,"VirtIOConsole"],[6,"Result"],[3,"VirtIOGpu"],[3,"VirtIOHeader"],[3,"VirtIOInput"],[3,"VirtIONet"],[8,"FnOnce"],[4,"RespStatus"],[4,"InputConfigSelect"],[3,"InputEvent"],[4,"Error"],[15,"u64"],[3,"BlkResp"],[4,"DeviceType"],[15,"usize"],[6,"PhysAddr"],[15,"i32"],[3,"Formatter"],[6,"Result"],[15,"u32"],[6,"VirtAddr"],[4,"Option"],[15,"u16"],[15,"u8"],[4,"Result"],[3,"TypeId"]]},\
"volatile":{"doc":"Provides wrapper types <code>Volatile</code>, <code>ReadOnly</code>, <code>WriteOnly</code>, …","t":[3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ReadOnly","ReadWrite","Volatile","WriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","default","default","default","fmt","fmt","from","from","from","into","into","into","new","new","new","read","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","write","write"],"q":["volatile","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A volatile wrapper which only allows read operations.","A volatile wrapper which allows both read and write …","A wrapper type around a volatile variable, which allows …","A volatile wrapper which only allows write operations.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a new volatile instance wrapping the given value.","Construct a new read-only volatile wrapper wrapping the …","Constructs a new write only volatile wrapper around the …","Performs a volatile read of the contained value, returning …","Perform a volatile read of the contained value, returning …","","","","","","","","","","Performs a volatile read of the contained value, passes a …","Performs a volatile write, setting the contained value to …","Performs a volatile write of value <code>value</code> into the …"],"i":[0,0,0,0,2,4,6,2,4,6,2,4,2,4,6,2,4,2,4,6,2,4,6,2,4,6,2,4,2,4,6,2,4,6,2,4,6,2,2,6],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[3,1]]]]],[[4,[[0,[3,1]]]]]],[[],[[2,[[0,[5,1]]]]]],[[],[[4,[[0,[5,1]]]]]],[[],[[6,[[0,[5,1]]]]]],[[[2,[[0,[7,1]]]],8],9],[[[4,[[0,[7,1]]]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[1,[[4,[1]]]],[1,[[6,[1]]]],[[[2,[1]]],1],[[[4,[1]]],1],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[[2,[1]]]],[[[2,[1]],1]],[[[6,[1]],1]]],"p":[[8,"Copy"],[3,"Volatile"],[8,"Clone"],[3,"ReadOnly"],[8,"Default"],[3,"WriteOnly"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"xmas_elf":{"doc":"","t":[3,8,6,6,11,11,0,11,11,11,11,10,11,10,11,11,11,0,0,12,12,11,11,0,11,11,11,11,0,0,11,11,11,13,13,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,5,11,11,11,11,11,12,13,13,13,13,13,4,3,13,13,4,3,13,13,3,13,13,3,4,3,13,13,13,13,13,17,4,3,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,3,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,5,11,12,11,12,11,12,12,12,5,11,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,17,17,17,17,17,3,13,13,13,13,13,13,13,13,13,13,13,4,3,3,3,4,13,17,17,17,17,17,13,4,3,13,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,12,5,11,12,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,17,17,17,17,3,3,4,3,13,13,13,13,13,13,13,13,13,13,17,17,17,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,4,3,3,3,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,3,13,13,3,3,8,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,12,12],"n":["ElfFile","Extensions","P32","P64","borrow","borrow_mut","dynamic","find_section_by_name","fmt","from","get_dyn_string","get_gnu_buildid","get_gnu_buildid","get_gnu_debuglink","get_gnu_debuglink","get_shstr","get_string","hash","header","header","input","into","new","program","program_header","program_iter","section_header","section_iter","sections","symbol_table","try_from","try_into","type_id","BindNow","Debug","Dynamic","FLAG_1_CONFALT","FLAG_1_DIRECT","FLAG_1_DISPRELDNE","FLAG_1_DISPRELPND","FLAG_1_EDITED","FLAG_1_ENDFILTEE","FLAG_1_GLOBAL","FLAG_1_GLOBAUDIT","FLAG_1_GROUP","FLAG_1_IGNMULDEF","FLAG_1_INITFIRST","FLAG_1_INTERPOSE","FLAG_1_LOADFLTR","FLAG_1_NODEFLIB","FLAG_1_NODELETE","FLAG_1_NODIRECT","FLAG_1_NODUMP","FLAG_1_NOHDR","FLAG_1_NOKSYMS","FLAG_1_NOOPEN","FLAG_1_NORELOC","FLAG_1_NOW","FLAG_1_ORIGIN","FLAG_1_PIE","FLAG_1_SINGLETON","FLAG_1_STUB","FLAG_1_SYMINTPOSE","FLAG_1_TRANS","Fini","FiniArray","FiniArraySize","Flags","Flags1","Hash","Init","InitArray","InitArraySize","JmpRel","Needed","Null","OsSpecific","PltRel","PltRelSize","Pltgot","PreInitArray","PreInitArraySize","ProcessorSpecific","RPath","Rel","RelEnt","RelSize","Rela","RelaEnt","RelaSize","RunPath","SoName","StrSize","StrTab","SymEnt","SymTab","SymTabShIndex","Symbolic","Tag","Tag_","TextRel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","get_ptr","get_ptr","get_tag","get_tag","get_val","get_val","into","into","into","ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","HashTable","borrow","borrow_mut","clone","fmt","from","get_bucket","get_chain","hash","into","lookup","try_from","try_into","type_id","0","AArch64","Aix","Arm","BPF","BigEndian","Class","Class_","Core","Current","Data","Data_","Executable","FreeBSD","Header","Header32","Header64","HeaderPt1","HeaderPt2","HeaderPt2_","HpUx","Ia64","Irix","Linux","LittleEndian","MAGIC","Machine","Machine_","Mips","NetBSD","None","None","None","None","None","OpenBSD","OpenVMS","OsAbi","OsAbi_","Other","Other","Other","Other","Other","PowerPC","ProcessorSpecific","Relocatable","SharedObject","SixtyFour","Solaris","Sparc","SuperH","SystemV","ThirtyTwo","Type","Type_","Version","Version_","X86","X86_64","abi_version","as_class","as_data","as_machine","as_os_abi","as_type","as_version","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","data","data","entry_point","entry_point","eq","eq","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header_size","header_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_none","is_none","is_none","is_none","is_none","is_none","machine","machine","magic","ne","ne","ne","ne","ne","ne","ne","os_abi","os_abi","padding","parse_header","ph_count","ph_count","ph_entry_size","ph_entry_size","ph_offset","ph_offset","pt1","pt2","sanity_check","sh_count","sh_count","sh_entry_size","sh_entry_size","sh_offset","sh_offset","sh_str_index","sh_str_index","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","0","0","0","0","0","0","0","0","0","Dynamic","Dynamic32","Dynamic64","Empty","FLAG_MASKOS","FLAG_MASKPROC","FLAG_R","FLAG_W","FLAG_X","Flags","GnuRelro","Interp","Load","Note","Note64","Null","OsSpecific","Ph32","Ph64","Phdr","ProcessorSpecific","ProgramHeader","ProgramHeader32","ProgramHeader64","ProgramIter","SegmentData","ShLib","TYPE_GNU_RELRO","TYPE_HIOS","TYPE_HIPROC","TYPE_LOOS","TYPE_LOPROC","Tls","Type","Type_","Undefined","align","align","align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","default","default","default","default","eq","eq","file","file_size","file_size","file_size","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_data","get_data","get_data","get_type","get_type","get_type","into","into","into","into","into","into","into","into","into_iter","is_execute","is_read","is_write","mem_size","mem_size","mem_size","ne","ne","next","next_index","offset","offset","offset","parse_program_header","physical_addr","physical_addr","physical_addr","raw_data","raw_data","sanity_check","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virtual_addr","virtual_addr","virtual_addr","0","0","0","0","0","0","1","0","0","COMPRESS_HIOS","COMPRESS_HIPROC","COMPRESS_LOOS","COMPRESS_LOPROC","CompressionHeader32","CompressionHeader64","CompressionType","CompressionType_","DynSym","DynSymbolTable32","DynSymbolTable64","Dynamic","Dynamic32","Dynamic64","Empty","FiniArray","FnArray32","FnArray64","GRP_COMDAT","GRP_MASKOS","GRP_MASKPROC","Group","Group","Hash","HashTable","InitArray","NoBits","Note","Note64","NoteHeader","Null","OsSpecific","OsSpecific","PreInitArray","ProcessorSpecific","ProcessorSpecific","ProgBits","Rel","Rel","Rel32","Rel64","Rela","Rela","Rela32","Rela64","SHF_ALLOC","SHF_COMPRESSED","SHF_EXECINSTR","SHF_GROUP","SHF_INFO_LINK","SHF_LINK_ORDER","SHF_MASKOS","SHF_MASKPROC","SHF_MERGE","SHF_OS_NONCONFORMING","SHF_STRINGS","SHF_TLS","SHF_WRITE","SHN_ABS","SHN_COMMON","SHN_HIOS","SHN_HIPROC","SHN_HIRESERVE","SHN_LOOS","SHN_LOPROC","SHN_LORESERVE","SHN_UNDEF","SHN_XINDEX","SHT_HIOS","SHT_HIPROC","SHT_HIUSER","SHT_LOOS","SHT_LOPROC","SHT_LOUSER","SectionData","SectionHeader","SectionHeader_","SectionIter","SectionStrings","Sh32","Sh64","ShLib","ShType","ShType_","StrArray","StrTab","SymTab","SymTabShIndex","SymTabShIndex","SymbolTable32","SymbolTable64","Undefined","User","Zlib","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","desc","eq","eq","file","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_addend","get_addend","get_data","get_name","get_offset","get_offset","get_offset","get_offset","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_type","get_type","get_type","get_type","get_type","info","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","link","name","name","ne","ne","next","next","next_index","offset","parse_section_header","raw_data","sanity_check","size","strings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","flags","indicies","0","0","0","0","0","Binding","Binding_","Common","Default","DynEntry32","DynEntry64","Entry","Entry32","Entry64","File","Func","Global","Hidden","Internal","Local","NoType","Object","OsSpecific","OsSpecific","ProcessorSpecific","ProcessorSpecific","Protected","Section","Tls","Type","Type_","Visibility","Visibility_","Weak","as_binding","as_type","as_visibility","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_binding","get_name","get_name","get_name","get_name","get_name","get_other","get_section_header","get_type","info","info","info","info","info","into","into","into","into","into","into","into","into","into","into","name","name","name","name","name","ne","ne","other","other","other","other","other","shndx","shndx","shndx","shndx","shndx","size","size","size","size","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","0","0","0","0"],"q":["xmas_elf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::dynamic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::dynamic::Tag","","xmas_elf::hash","","","","","","","","","","","","","","xmas_elf::header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::header::Class","xmas_elf::header::Data","xmas_elf::header::HeaderPt2","","xmas_elf::header::Machine","xmas_elf::header::OsAbi","xmas_elf::header::Type","xmas_elf::header::Version","xmas_elf::program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::program::ProgramHeader","","xmas_elf::program::SegmentData","","","","","xmas_elf::program::Type","","xmas_elf::sectionsxmas_elf::sections::CompressionType","","xmas_elf::sections::SectionData","","","","","","","","","","","","","","","","","","","","xmas_elf::sections::SectionHeader","","xmas_elf::sections::ShType","","","xmas_elf::symbol_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::symbol_table::Binding","","xmas_elf::symbol_table::Type",""],"d":["","A trait for things that are common ELF conventions but not …","","","","","","","","Returns the argument unchanged.","","Parse and return the value of the .note.gnu.build-id …","","Parse and return the value of the .gnu_debuglink section, …","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,1,1,1,1,73,1,73,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,17,20,15,17,20,15,17,15,17,20,15,15,17,20,15,17,20,20,20,20,20,20,20,15,17,17,20,15,17,20,15,17,20,15,17,74,75,0,23,23,23,23,23,23,23,0,23,23,23,23,23,33,30,32,30,30,28,0,0,34,36,0,0,34,32,0,39,39,0,0,0,32,30,32,32,28,0,0,0,30,32,26,28,36,34,30,32,32,0,0,26,28,36,32,30,30,34,34,34,26,32,30,30,32,26,0,0,0,0,30,30,37,25,27,29,31,33,35,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,37,37,38,37,39,25,26,27,28,35,36,31,32,33,34,29,30,37,37,39,42,25,26,28,36,32,34,30,42,38,38,37,39,39,42,42,25,26,27,28,35,36,31,32,33,34,29,30,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,39,42,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,25,26,27,28,35,36,39,42,37,25,26,28,36,32,34,30,37,37,37,0,39,42,39,42,39,42,38,38,0,39,42,39,42,39,42,39,42,39,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,39,42,38,37,39,42,25,26,27,28,35,36,31,32,33,34,29,30,37,39,37,42,76,77,78,79,80,81,82,83,46,48,49,49,49,0,0,0,0,0,0,48,48,48,48,49,48,48,10,10,48,48,0,0,0,0,0,48,0,0,0,0,0,48,0,0,49,10,44,45,11,10,44,45,46,47,48,49,11,10,44,45,46,47,48,49,10,44,45,46,47,48,44,45,46,47,46,48,11,10,44,45,10,44,45,11,10,10,44,44,45,45,46,46,46,47,48,49,11,10,44,45,46,47,48,49,10,44,45,10,44,45,11,10,44,45,46,47,48,49,11,46,46,46,10,44,45,46,48,11,11,10,44,45,0,10,44,45,44,45,0,11,10,44,45,46,47,48,49,11,10,44,45,46,47,48,49,44,45,11,10,44,45,46,47,48,49,10,44,45,84,85,86,87,88,89,89,90,91,0,0,0,0,0,0,0,0,51,58,58,51,58,58,58,51,58,58,0,0,0,51,58,51,58,51,51,51,58,0,51,51,55,51,51,55,51,0,51,58,58,0,51,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,51,0,0,58,51,51,51,58,58,58,58,51,55,3,12,3,57,50,51,58,59,52,53,54,55,60,61,56,12,3,57,50,51,58,59,52,53,54,55,60,61,56,3,50,51,52,53,54,55,56,56,51,55,12,3,12,3,3,57,50,51,58,59,52,53,54,55,60,61,56,12,3,57,50,51,58,59,52,53,54,55,60,61,56,60,60,3,3,60,60,61,61,60,60,61,61,3,60,60,61,61,3,12,3,57,50,51,58,59,52,53,54,55,60,61,56,12,59,3,3,56,51,55,12,59,12,3,0,3,0,3,58,12,3,57,50,51,58,59,52,53,54,55,60,61,56,12,3,57,50,51,58,59,52,53,54,55,60,61,56,3,56,12,3,57,50,51,58,59,52,53,54,55,60,61,56,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,103,111,111,112,113,114,115,116,0,0,66,68,0,0,0,0,0,66,66,64,68,68,64,66,66,64,66,64,66,68,66,66,0,0,0,0,64,63,65,67,69,70,71,72,67,68,63,64,65,66,69,70,71,72,67,68,63,64,65,66,67,68,63,64,65,66,64,66,24,69,70,71,72,67,68,63,64,65,66,69,70,71,72,67,68,63,64,65,66,24,24,69,70,71,72,24,24,24,24,69,70,71,72,69,70,71,72,67,68,63,64,65,66,24,69,70,71,72,64,66,24,69,70,71,72,24,69,70,71,72,24,69,70,71,72,69,70,71,72,67,68,63,64,65,66,69,70,71,72,67,68,63,64,65,66,69,70,71,72,67,68,63,64,65,66,24,69,70,71,72,117,118,119,120],"f":[0,0,0,0,[[]],[[]],0,[[1,2],[[4,[3]]]],[[1,5],6],[[]],[[1,7],[[8,[2,2]]]],[[],4],[1,4],[[],4],[1,4],[[1,7],[[8,[2,2]]]],[[1,7],[[8,[2,2]]]],0,0,0,0,[[]],[[],[[8,[1,2]]]],0,[[1,9],[[8,[10,2]]]],[1,11],[[1,9],[[8,[3,2]]]],[1,12],0,0,[[],8],[[],8],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[14]]]],[[[17,[16]],17],18],[[[20,[19]],5],6],[[[15,[21]],5],6],[[[15,[22]],5],6],[[[17,[19]],5],6],[[]],[[]],[[]],[[[20,[21]]],[[8,[21,2]]]],[[[20,[22]]],[[8,[22,2]]]],[[[20,[22]]],[[8,[[17,[22]],2]]]],[[[20,[21]]],[[8,[[17,[21]],2]]]],[[[20,[22]]],[[8,[22,2]]]],[[[20,[21]]],[[8,[21,2]]]],[[]],[[]],[[]],[[[17,[16]],17],18],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],0,0,0,[[]],[[]],[23,23],[[23,5],6],[[]],[[23,7],7],[[23,7],7],[2,7],[[]],[[23,2],24],[[],8],[[],8],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,26],0,[38,38],[37,37],[39,39],[25,25],[26,26],[27,27],[28,28],[35,35],[36,36],[31,31],[32,32],[33,33],[34,34],[29,29],[30,30],[37,28],0,[39,40],0,[[25,25],18],[[26,26],18],[[28,28],18],[[36,36],18],[[32,32],18],[[34,34],18],[[30,30],18],0,[[38,5],6],[[38,5],6],[[37,5],6],[[39,5],6],[[39,5],6],[[[42,[41]],5],6],[[[42,[19]],5],6],[[25,5],6],[[26,5],6],[[27,5],6],[[28,5],6],[[35,5],6],[[36,5],6],[[31,5],6],[[32,5],6],[[33,5],6],[[34,5],6],[[29,5],6],[[30,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,18],[26,18],[27,18],[28,18],[35,18],[36,18],[39,29],0,0,[[25,25],18],[[26,26],18],[[28,28],18],[[36,36],18],[[32,32],18],[[34,34],18],[[30,30],18],[37,32],0,0,[[],[[8,[38,2]]]],[39,9],0,[39,9],0,[39,40],0,0,0,[1,[[8,[2]]]],[39,9],0,[39,9],0,[39,40],0,[39,9],0,[39,43],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[39,33],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[37,36],[39,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,10],[44,44],[45,45],[46,46],[47,47],[48,48],[[],44],[[],45],[[],46],[[],47],[[46,46],18],[[48,48],18],0,[10,40],0,0,[10,46],0,0,[[11,5],6],[[10,5],6],[[10,5],6],[[44,5],6],[[44,5],6],[[45,5],6],[[45,5],6],[[46,5],6],[[46,5],6],[[46,5],6],[[47,5],6],[[48,5],6],[[49,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,1],[[8,[49,2]]]],[[44,1],[[8,[49,2]]]],[[45,1],[[8,[49,2]]]],[10,[[8,[48,2]]]],[44,[[8,[48,2]]]],[45,[[8,[48,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,18],[46,18],[46,18],[10,40],0,0,[[46,46],18],[[48,48],18],[11,4],0,[10,40],0,0,[[38,9],[[8,[10,2]]]],[10,40],0,0,[[44,1]],[[45,1]],[[10,1],[[8,[2]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[10,40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[56],[[51,51],18],[[55,55],18],0,[3,40],[[12,5],6],[[3,5],6],[[3,5],6],[[[57,[19]],5],6],[[50,5],6],[[51,5],6],[[58,5],6],[[59,5],6],[[52,5],6],[[53,5],6],[[54,5],6],[[55,5],6],[[[60,[19]],5],6],[[[61,[19]],5],6],[[56,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[22]]],40],[[[60,[21]]],7],[[3,1],[[8,[58,2]]]],[[3,1],[[8,[2,2]]]],[[[60,[22]]],40],[[[60,[21]]],7],[[[61,[22]]],40],[[[61,[21]]],7],[[[60,[21]]],7],[[[60,[22]]],7],[[[61,[22]]],7],[[[61,[21]]],7],[3,[[8,[51,2]]]],[[[60,[22]]],7],[[[60,[21]]],62],[[[61,[22]]],7],[[[61,[21]]],62],[3,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,7],[3,7],[56,2],[[51,51],18],[[55,55],18],[12,4],[59,[[4,[2]]]],0,[3,40],[[38,9],[[8,[3,2]]]],[[3,1]],[[3,1],[[8,[2]]]],[3,40],[58,[[8,[59]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[3,50],[56,7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[63,[[8,[64,2]]]],[65,[[8,[66,2]]]],[67,68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67,67],[68,68],[63,63],[64,64],[65,65],[66,66],[[64,64],18],[[66,66],18],[[24,5],6],[[69,5],6],[[70,5],6],[[71,5],6],[[72,5],6],[[67,5],6],[[68,5],6],[[63,5],6],[[64,5],6],[[65,5],6],[[66,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[8,[64,2]]]],[1,[[8,[2,2]]]],[[69,1],[[8,[2,2]]]],[[70,1],[[8,[2,2]]]],[[71,1],[[8,[2,2]]]],[[72,1],[[8,[2,2]]]],[[],68],[[1,43],[[8,[3,2]]]],[[],[[8,[66,2]]]],[[],62],[69,62],[70,62],[71,62],[72,62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[69,7],[70,7],[71,7],[72,7],[[64,64],18],[[66,66],18],[[],67],[69,67],[70,67],[71,67],[72,67],[[],9],[69,9],[70,9],[71,9],[72,9],[[],40],[69,40],[70,40],[71,40],[72,40],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],40],[69,40],[70,40],[71,40],[72,40],0,0,0,0],"p":[[3,"ElfFile"],[15,"str"],[4,"SectionHeader"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[15,"u16"],[4,"ProgramHeader"],[3,"ProgramIter"],[3,"SectionIter"],[3,"TypeId"],[8,"Clone"],[3,"Tag_"],[8,"PartialEq"],[4,"Tag"],[15,"bool"],[8,"Debug"],[3,"Dynamic"],[6,"P32"],[6,"P64"],[3,"HashTable"],[8,"Entry"],[3,"Class_"],[4,"Class"],[3,"Data_"],[4,"Data"],[3,"Machine_"],[4,"Machine"],[3,"OsAbi_"],[4,"OsAbi"],[3,"Type_"],[4,"Type"],[3,"Version_"],[4,"Version"],[3,"HeaderPt1"],[3,"Header"],[4,"HeaderPt2"],[15,"u64"],[8,"Display"],[3,"HeaderPt2_"],[15,"usize"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"Flags"],[3,"Type_"],[4,"Type"],[4,"SegmentData"],[3,"ShType_"],[4,"ShType"],[3,"CompressionHeader64"],[3,"CompressionHeader32"],[3,"CompressionType_"],[4,"CompressionType"],[3,"NoteHeader"],[3,"SectionHeader_"],[4,"SectionData"],[3,"SectionStrings"],[3,"Rela"],[3,"Rel"],[15,"u8"],[3,"Binding_"],[4,"Binding"],[3,"Type_"],[4,"Type"],[3,"Visibility_"],[4,"Visibility"],[3,"Entry32"],[3,"Entry64"],[3,"DynEntry32"],[3,"DynEntry64"],[8,"Extensions"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"Other"],[13,"Other"],[13,"Header32"],[13,"Header64"],[13,"Other"],[13,"Other"],[13,"ProcessorSpecific"],[13,"Other"],[13,"Ph32"],[13,"Ph64"],[13,"Undefined"],[13,"Dynamic32"],[13,"Dynamic64"],[13,"Note64"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"Undefined"],[13,"StrArray"],[13,"FnArray32"],[13,"FnArray64"],[13,"SymbolTable32"],[13,"SymbolTable64"],[13,"DynSymbolTable32"],[13,"DynSymbolTable64"],[13,"SymTabShIndex"],[13,"Note64"],[13,"Rela32"],[13,"Rela64"],[13,"Rel32"],[13,"Rel64"],[13,"Dynamic32"],[13,"Dynamic64"],[13,"HashTable"],[13,"Group"],[13,"Sh32"],[13,"Sh64"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"User"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"OsSpecific"],[13,"ProcessorSpecific"]]},\
"zero":{"doc":"Functions for reading binary data into Rust data …","t":[8,3,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,11,11,11,11],"n":["Pod","StrReaderIterator","borrow","borrow_mut","clone","fmt","from","into","into_iter","next","read","read_array","read_array_unsafe","read_str","read_str_unsafe","read_strs_to_null","read_unsafe","size_hint","try_from","try_into","type_id"],"q":["zero","","","","","","","","","","","","","","","","","","","",""],"d":["Implementing this trait means that the concrete type is …","Iterates over <code>self.data</code>, yielding strings (null-terminated …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Reads a single <code>T</code> from <code>input</code>.","Read an array of <code>T</code>s from input.","Reads an array of <code>T</code>s from <code>input</code> with no checks.","Read a string from <code>input</code>. The string must be a …","Reads a null-terminated string from <code>input</code> with no checks.","Returns an iterator which will return a sequence of …","Reads a <code>T</code> from <code>input</code> with no checks.","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[1,2],3],[[]],[[]],[[]],[1,[[5,[4]]]],[[]],[[]],[[]],[[],4],[[],4],[[],1],[[]],[1],[[],6],[[],6],[[],7]],"p":[[3,"StrReaderIterator"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
